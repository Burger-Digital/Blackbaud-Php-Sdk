<?php
/**
 * RelationshipAddTest
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  BurgerDigital\BlackbaudPhpSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Constituent
 *
 * This API manages constituent information and related entities such as addresses, phones, emails, and notes.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace BurgerDigital\BlackbaudPhpSdk\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * RelationshipAddTest Class Doc Comment
 *
 * @category    Class
 * @description Relationships describe connections between constituents and other individuals and organizations such as family, friends, and employers. Tracking constituent relationships can enhance fundraising efforts and interactions.
 * @package     BurgerDigital\BlackbaudPhpSdk
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class RelationshipAddTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "RelationshipAdd"
     */
    public function testRelationshipAdd()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "comment"
     */
    public function testPropertyComment()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "constituent_id"
     */
    public function testPropertyConstituentId()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "end"
     */
    public function testPropertyEnd()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "is_organization_contact"
     */
    public function testPropertyIsOrganizationContact()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "is_primary_business"
     */
    public function testPropertyIsPrimaryBusiness()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "is_spouse"
     */
    public function testPropertyIsSpouse()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "is_spouse_head_of_household"
     */
    public function testPropertyIsSpouseHeadOfHousehold()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "is_constituent_head_of_household"
     */
    public function testPropertyIsConstituentHeadOfHousehold()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "organization_contact_type"
     */
    public function testPropertyOrganizationContactType()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "position"
     */
    public function testPropertyPosition()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "reciprocal_type"
     */
    public function testPropertyReciprocalType()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "relation_id"
     */
    public function testPropertyRelationId()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "relation"
     */
    public function testPropertyRelation()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "start"
     */
    public function testPropertyStart()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "type"
     */
    public function testPropertyType()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "do_not_reciprocate"
     */
    public function testPropertyDoNotReciprocate()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
