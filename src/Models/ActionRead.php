<?php
/**
 * ActionRead
 *
 * PHP version 5
 *
 * @category Class
 * @package  BurgerDigital\BlackbaudPhpSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Constituent
 *
 * This API manages constituent information and related entities such as addresses, phones, emails, and notes.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.24
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BurgerDigital\BlackbaudPhpSdk\BurgerDigital\BlackbaudPhpSdk\Models;

use \ArrayAccess;
use \BurgerDigital\BlackbaudPhpSdk\ObjectSerializer;

/**
 * ActionRead Class Doc Comment
 *
 * @category Class
 * @description Actions track the interactions and tasks that are required to secure gifts and cultivate relationships with constituents.
 * @package  BurgerDigital\BlackbaudPhpSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ActionRead implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ActionRead';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'category' => 'string',
'completed' => 'bool',
'completed_date' => '\DateTime',
'computed_status' => 'string',
'constituent_id' => 'string',
'date' => '\DateTime',
'date_added' => '\DateTime',
'date_modified' => '\DateTime',
'description' => 'string',
'direction' => 'string',
'end_time' => 'string',
'fundraisers' => 'string[]',
'location' => 'string',
'opportunity_id' => 'string',
'outcome' => 'string',
'priority' => 'string',
'start_time' => 'string',
'status' => 'string',
'status_code' => 'string',
'summary' => 'string',
'type' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'category' => null,
'completed' => null,
'completed_date' => 'date-time',
'computed_status' => null,
'constituent_id' => null,
'date' => 'date-time',
'date_added' => 'date-time',
'date_modified' => 'date-time',
'description' => null,
'direction' => null,
'end_time' => null,
'fundraisers' => null,
'location' => null,
'opportunity_id' => null,
'outcome' => null,
'priority' => null,
'start_time' => null,
'status' => null,
'status_code' => null,
'summary' => null,
'type' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'category' => 'category',
'completed' => 'completed',
'completed_date' => 'completed_date',
'computed_status' => 'computed_status',
'constituent_id' => 'constituent_id',
'date' => 'date',
'date_added' => 'date_added',
'date_modified' => 'date_modified',
'description' => 'description',
'direction' => 'direction',
'end_time' => 'end_time',
'fundraisers' => 'fundraisers',
'location' => 'location',
'opportunity_id' => 'opportunity_id',
'outcome' => 'outcome',
'priority' => 'priority',
'start_time' => 'start_time',
'status' => 'status',
'status_code' => 'status_code',
'summary' => 'summary',
'type' => 'type'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'category' => 'setCategory',
'completed' => 'setCompleted',
'completed_date' => 'setCompletedDate',
'computed_status' => 'setComputedStatus',
'constituent_id' => 'setConstituentId',
'date' => 'setDate',
'date_added' => 'setDateAdded',
'date_modified' => 'setDateModified',
'description' => 'setDescription',
'direction' => 'setDirection',
'end_time' => 'setEndTime',
'fundraisers' => 'setFundraisers',
'location' => 'setLocation',
'opportunity_id' => 'setOpportunityId',
'outcome' => 'setOutcome',
'priority' => 'setPriority',
'start_time' => 'setStartTime',
'status' => 'setStatus',
'status_code' => 'setStatusCode',
'summary' => 'setSummary',
'type' => 'setType'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'category' => 'getCategory',
'completed' => 'getCompleted',
'completed_date' => 'getCompletedDate',
'computed_status' => 'getComputedStatus',
'constituent_id' => 'getConstituentId',
'date' => 'getDate',
'date_added' => 'getDateAdded',
'date_modified' => 'getDateModified',
'description' => 'getDescription',
'direction' => 'getDirection',
'end_time' => 'getEndTime',
'fundraisers' => 'getFundraisers',
'location' => 'getLocation',
'opportunity_id' => 'getOpportunityId',
'outcome' => 'getOutcome',
'priority' => 'getPriority',
'start_time' => 'getStartTime',
'status' => 'getStatus',
'status_code' => 'getStatusCode',
'summary' => 'getSummary',
'type' => 'getType'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const COMPUTED_STATUS_OPEN = 'Open';
const COMPUTED_STATUS_COMPLETED = 'Completed';
const COMPUTED_STATUS_PAST_DUE = 'PastDue';
const DIRECTION_INBOUND = 'Inbound';
const DIRECTION_OUTBOUND = 'Outbound';
const OUTCOME_SUCCESSFUL = 'Successful';
const OUTCOME_UNSUCCESSFUL = 'Unsuccessful';
const PRIORITY_NORMAL = 'Normal';
const PRIORITY_HIGH = 'High';
const PRIORITY_LOW = 'Low';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getComputedStatusAllowableValues()
    {
        return [
            self::COMPUTED_STATUS_OPEN,
self::COMPUTED_STATUS_COMPLETED,
self::COMPUTED_STATUS_PAST_DUE,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDirectionAllowableValues()
    {
        return [
            self::DIRECTION_INBOUND,
self::DIRECTION_OUTBOUND,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOutcomeAllowableValues()
    {
        return [
            self::OUTCOME_SUCCESSFUL,
self::OUTCOME_UNSUCCESSFUL,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPriorityAllowableValues()
    {
        return [
            self::PRIORITY_NORMAL,
self::PRIORITY_HIGH,
self::PRIORITY_LOW,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['completed'] = isset($data['completed']) ? $data['completed'] : null;
        $this->container['completed_date'] = isset($data['completed_date']) ? $data['completed_date'] : null;
        $this->container['computed_status'] = isset($data['computed_status']) ? $data['computed_status'] : null;
        $this->container['constituent_id'] = isset($data['constituent_id']) ? $data['constituent_id'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['date_added'] = isset($data['date_added']) ? $data['date_added'] : null;
        $this->container['date_modified'] = isset($data['date_modified']) ? $data['date_modified'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['direction'] = isset($data['direction']) ? $data['direction'] : null;
        $this->container['end_time'] = isset($data['end_time']) ? $data['end_time'] : null;
        $this->container['fundraisers'] = isset($data['fundraisers']) ? $data['fundraisers'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['opportunity_id'] = isset($data['opportunity_id']) ? $data['opportunity_id'] : null;
        $this->container['outcome'] = isset($data['outcome']) ? $data['outcome'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['start_time'] = isset($data['start_time']) ? $data['start_time'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['status_code'] = isset($data['status_code']) ? $data['status_code'] : null;
        $this->container['summary'] = isset($data['summary']) ? $data['summary'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getComputedStatusAllowableValues();
        if (!is_null($this->container['computed_status']) && !in_array($this->container['computed_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'computed_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDirectionAllowableValues();
        if (!is_null($this->container['direction']) && !in_array($this->container['direction'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'direction', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOutcomeAllowableValues();
        if (!is_null($this->container['outcome']) && !in_array($this->container['outcome'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'outcome', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPriorityAllowableValues();
        if (!is_null($this->container['priority']) && !in_array($this->container['priority'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'priority', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The immutable system record ID of the action.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string $category The channel or intent of the constituent interaction. Available values are <i>Phone Call</i>, <i>Meeting</i>, <i>Mailing</i>, <i>Email</i>, and <i>Task/Other</i>.
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets completed
     *
     * @return bool
     */
    public function getCompleted()
    {
        return $this->container['completed'];
    }

    /**
     * Sets completed
     *
     * @param bool $completed Indicates whether the action is complete. If the system is configured to use custom action statuses, this value is based on the action status value. This property defaults to <i>false</i> if no value is provided.
     *
     * @return $this
     */
    public function setCompleted($completed)
    {
        $this->container['completed'] = $completed;

        return $this;
    }

    /**
     * Gets completed_date
     *
     * @return \DateTime
     */
    public function getCompletedDate()
    {
        return $this->container['completed_date'];
    }

    /**
     * Sets completed_date
     *
     * @param \DateTime $completed_date The date when the action was completed. Uses <a href=\"https://tools.ietf.org/html/rfc3339\">ISO-8601 format: </a><i>1969-11-21T10:29:43</i>.
     *
     * @return $this
     */
    public function setCompletedDate($completed_date)
    {
        $this->container['completed_date'] = $completed_date;

        return $this;
    }

    /**
     * Gets computed_status
     *
     * @return string
     */
    public function getComputedStatus()
    {
        return $this->container['computed_status'];
    }

    /**
     * Sets computed_status
     *
     * @param string $computed_status The computed action status. If the system is not configured to use custom action statuses, this field computes the status based on the <code>completed</code> and <code>date</code> properties. If not, the field calculates the status based on the action's date property and whether action's <code>Action Status</code> property is configured as completed.
     *
     * @return $this
     */
    public function setComputedStatus($computed_status)
    {
        $allowedValues = $this->getComputedStatusAllowableValues();
        if (!is_null($computed_status) && !in_array($computed_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'computed_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['computed_status'] = $computed_status;

        return $this;
    }

    /**
     * Gets constituent_id
     *
     * @return string
     */
    public function getConstituentId()
    {
        return $this->container['constituent_id'];
    }

    /**
     * Sets constituent_id
     *
     * @param string $constituent_id The immutable system record ID of the constituent associated with the action.
     *
     * @return $this
     */
    public function setConstituentId($constituent_id)
    {
        $this->container['constituent_id'] = $constituent_id;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date The action date. Uses <a href=\"https://tools.ietf.org/html/rfc3339\">ISO-8601 format: </a><i>1969-11-21T10:29:43</i>.
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets date_added
     *
     * @return \DateTime
     */
    public function getDateAdded()
    {
        return $this->container['date_added'];
    }

    /**
     * Sets date_added
     *
     * @param \DateTime $date_added The date when the action was created. Includes an offset from UTC in <a href=\"https://tools.ietf.org/html/rfc3339\">ISO-8601 format: </a><i>1969-11-21T10:29:43-04:00</i>.
     *
     * @return $this
     */
    public function setDateAdded($date_added)
    {
        $this->container['date_added'] = $date_added;

        return $this;
    }

    /**
     * Gets date_modified
     *
     * @return \DateTime
     */
    public function getDateModified()
    {
        return $this->container['date_modified'];
    }

    /**
     * Sets date_modified
     *
     * @param \DateTime $date_modified The date when the action was last modified. Includes an offset from UTC in <a href=\"https://tools.ietf.org/html/rfc3339\">ISO-8601 format: </a><i>1969-11-21T10:29:43-04:00</i>.
     *
     * @return $this
     */
    public function setDateModified($date_modified)
    {
        $this->container['date_modified'] = $date_modified;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The detailed explanation that elaborates on the action summary.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets direction
     *
     * @return string
     */
    public function getDirection()
    {
        return $this->container['direction'];
    }

    /**
     * Sets direction
     *
     * @param string $direction The direction of the action. Available values are <i>Inbound</i> and <i>Outbound</i>.
     *
     * @return $this
     */
    public function setDirection($direction)
    {
        $allowedValues = $this->getDirectionAllowableValues();
        if (!is_null($direction) && !in_array($direction, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'direction', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['direction'] = $direction;

        return $this;
    }

    /**
     * Gets end_time
     *
     * @return string
     */
    public function getEndTime()
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     *
     * @param string $end_time The end time of the action. Uses 24-hour time in the <i>HH:mm</i> format. For example, 17:30 represents 5:30 p.m.
     *
     * @return $this
     */
    public function setEndTime($end_time)
    {
        $this->container['end_time'] = $end_time;

        return $this;
    }

    /**
     * Gets fundraisers
     *
     * @return string[]
     */
    public function getFundraisers()
    {
        return $this->container['fundraisers'];
    }

    /**
     * Sets fundraisers
     *
     * @param string[] $fundraisers The set of immutable constituent system record IDs for the fundraisers associated with the action.
     *
     * @return $this
     */
    public function setFundraisers($fundraisers)
    {
        $this->container['fundraisers'] = $fundraisers;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string $location The location of the action. Available values are the entries in the <a href=\"https://developer.sky.blackbaud.com/docs/services/56b76470069a0509c8f1c5b3/operations/ListActionLocations\"><b>Action Locations</b></a> table.
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets opportunity_id
     *
     * @return string
     */
    public function getOpportunityId()
    {
        return $this->container['opportunity_id'];
    }

    /**
     * Sets opportunity_id
     *
     * @param string $opportunity_id The immutable system record ID of the opportunity associated with the action.
     *
     * @return $this
     */
    public function setOpportunityId($opportunity_id)
    {
        $this->container['opportunity_id'] = $opportunity_id;

        return $this;
    }

    /**
     * Gets outcome
     *
     * @return string
     */
    public function getOutcome()
    {
        return $this->container['outcome'];
    }

    /**
     * Sets outcome
     *
     * @param string $outcome The outcome of the action. Available values are <i>Successful</i> and <i>Unsuccessful</i>.
     *
     * @return $this
     */
    public function setOutcome($outcome)
    {
        $allowedValues = $this->getOutcomeAllowableValues();
        if (!is_null($outcome) && !in_array($outcome, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'outcome', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['outcome'] = $outcome;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return string
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param string $priority The priority of the action. Available values are <i>Normal</i>, <i>High</i>, and <i>Low</i>. The default is <i>Normal</i>.
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $allowedValues = $this->getPriorityAllowableValues();
        if (!is_null($priority) && !in_array($priority, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'priority', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return string
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param string $start_time The start time of the action. Uses 24-hour time in the <i>HH:mm</i> format. For example, 17:30 represents 5:30 p.m.
     *
     * @return $this
     */
    public function setStartTime($start_time)
    {
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The action status. If the system is configured to use custom action statuses, available values are the entries in the <a href=\"https://developer.sky.blackbaud.com/docs/services/56b76470069a0509c8f1c5b3/operations/ListActionStatusTypes\"><b>Action Status</b></a> table. If not, this field computes the status based on the <code>completed</code> and <code>date</code> properties: If an action is not completed and has a current or future date, the status is Open; if an action is not completed and has a past date, the status is Past due; and if an action is completed, the status is Completed.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_code
     *
     * @return string
     */
    public function getStatusCode()
    {
        return $this->container['status_code'];
    }

    /**
     * Sets status_code
     *
     * @param string $status_code The action status code. Available values are in the <a href=\"https://developer.sky.blackbaud.com/docs/services/56b76470069a0509c8f1c5b3/operations/ListActionStatusTypes\"><b>Action Status</b></a> table. This property is only returned when the system is configured to use custom action statuses.
     *
     * @return $this
     */
    public function setStatusCode($status_code)
    {
        $this->container['status_code'] = $status_code;

        return $this;
    }

    /**
     * Gets summary
     *
     * @return string
     */
    public function getSummary()
    {
        return $this->container['summary'];
    }

    /**
     * Sets summary
     *
     * @param string $summary The short description of the action that appears at the top of the record.
     *
     * @return $this
     */
    public function setSummary($summary)
    {
        $this->container['summary'] = $summary;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Additional description of the action to complement the category. Available values are the entries in the <a href=\"https://developer.sky.blackbaud.com/docs/services/56b76470069a0509c8f1c5b3/operations/ListActionTypes\"><b>Actions</b></a> table.
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
