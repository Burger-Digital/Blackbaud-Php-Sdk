<?php
/**
 * NonConstituentAdd
 *
 * PHP version 5
 *
 * @category Class
 * @package  BurgerDigital\BlackbaudPhpSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Constituent
 *
 * This API manages constituent information and related entities such as addresses, phones, emails, and notes.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.24
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BurgerDigital\BlackbaudPhpSdk\BurgerDigital\BlackbaudPhpSdk\Models;

use \ArrayAccess;
use \BurgerDigital\BlackbaudPhpSdk\ObjectSerializer;

/**
 * NonConstituentAdd Class Doc Comment
 *
 * @category Class
 * @description Non-constituents are the individuals and organizations related to constituents.
 * @package  BurgerDigital\BlackbaudPhpSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NonConstituentAdd implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'NonConstituentAdd';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'birthdate' => '\BurgerDigital\BlackbaudPhpSdk\BurgerDigital\BlackbaudPhpSdk\Models\FuzzyDate',
'deceased' => 'bool',
'deceased_date' => '\BurgerDigital\BlackbaudPhpSdk\BurgerDigital\BlackbaudPhpSdk\Models\FuzzyDate',
'first' => 'string',
'former_name' => 'string',
'gender' => 'string',
'last' => 'string',
'middle' => 'string',
'name' => 'string',
'preferred_name' => 'string',
'suffix' => 'string',
'suffix_2' => 'string',
'title' => 'string',
'title_2' => 'string',
'type' => 'string',
'primary_addressee' => '\BurgerDigital\BlackbaudPhpSdk\BurgerDigital\BlackbaudPhpSdk\Models\PrimaryNameFormatEdit',
'primary_salutation' => '\BurgerDigital\BlackbaudPhpSdk\BurgerDigital\BlackbaudPhpSdk\Models\PrimaryNameFormatEdit'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'birthdate' => null,
'deceased' => null,
'deceased_date' => null,
'first' => null,
'former_name' => null,
'gender' => null,
'last' => null,
'middle' => null,
'name' => null,
'preferred_name' => null,
'suffix' => null,
'suffix_2' => null,
'title' => null,
'title_2' => null,
'type' => null,
'primary_addressee' => null,
'primary_salutation' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'birthdate' => 'birthdate',
'deceased' => 'deceased',
'deceased_date' => 'deceased_date',
'first' => 'first',
'former_name' => 'former_name',
'gender' => 'gender',
'last' => 'last',
'middle' => 'middle',
'name' => 'name',
'preferred_name' => 'preferred_name',
'suffix' => 'suffix',
'suffix_2' => 'suffix_2',
'title' => 'title',
'title_2' => 'title_2',
'type' => 'type',
'primary_addressee' => 'primary_addressee',
'primary_salutation' => 'primary_salutation'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'birthdate' => 'setBirthdate',
'deceased' => 'setDeceased',
'deceased_date' => 'setDeceasedDate',
'first' => 'setFirst',
'former_name' => 'setFormerName',
'gender' => 'setGender',
'last' => 'setLast',
'middle' => 'setMiddle',
'name' => 'setName',
'preferred_name' => 'setPreferredName',
'suffix' => 'setSuffix',
'suffix_2' => 'setSuffix2',
'title' => 'setTitle',
'title_2' => 'setTitle2',
'type' => 'setType',
'primary_addressee' => 'setPrimaryAddressee',
'primary_salutation' => 'setPrimarySalutation'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'birthdate' => 'getBirthdate',
'deceased' => 'getDeceased',
'deceased_date' => 'getDeceasedDate',
'first' => 'getFirst',
'former_name' => 'getFormerName',
'gender' => 'getGender',
'last' => 'getLast',
'middle' => 'getMiddle',
'name' => 'getName',
'preferred_name' => 'getPreferredName',
'suffix' => 'getSuffix',
'suffix_2' => 'getSuffix2',
'title' => 'getTitle',
'title_2' => 'getTitle2',
'type' => 'getType',
'primary_addressee' => 'getPrimaryAddressee',
'primary_salutation' => 'getPrimarySalutation'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_INDIVIDUAL = 'Individual';
const TYPE_ORGANIZATION = 'Organization';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_INDIVIDUAL,
self::TYPE_ORGANIZATION,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['birthdate'] = isset($data['birthdate']) ? $data['birthdate'] : null;
        $this->container['deceased'] = isset($data['deceased']) ? $data['deceased'] : null;
        $this->container['deceased_date'] = isset($data['deceased_date']) ? $data['deceased_date'] : null;
        $this->container['first'] = isset($data['first']) ? $data['first'] : null;
        $this->container['former_name'] = isset($data['former_name']) ? $data['former_name'] : null;
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
        $this->container['last'] = isset($data['last']) ? $data['last'] : null;
        $this->container['middle'] = isset($data['middle']) ? $data['middle'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['preferred_name'] = isset($data['preferred_name']) ? $data['preferred_name'] : null;
        $this->container['suffix'] = isset($data['suffix']) ? $data['suffix'] : null;
        $this->container['suffix_2'] = isset($data['suffix_2']) ? $data['suffix_2'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['title_2'] = isset($data['title_2']) ? $data['title_2'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['primary_addressee'] = isset($data['primary_addressee']) ? $data['primary_addressee'] : null;
        $this->container['primary_salutation'] = isset($data['primary_salutation']) ? $data['primary_salutation'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets birthdate
     *
     * @return \BurgerDigital\BlackbaudPhpSdk\BurgerDigital\BlackbaudPhpSdk\Models\FuzzyDate
     */
    public function getBirthdate()
    {
        return $this->container['birthdate'];
    }

    /**
     * Sets birthdate
     *
     * @param \BurgerDigital\BlackbaudPhpSdk\BurgerDigital\BlackbaudPhpSdk\Models\FuzzyDate $birthdate birthdate
     *
     * @return $this
     */
    public function setBirthdate($birthdate)
    {
        $this->container['birthdate'] = $birthdate;

        return $this;
    }

    /**
     * Gets deceased
     *
     * @return bool
     */
    public function getDeceased()
    {
        return $this->container['deceased'];
    }

    /**
     * Sets deceased
     *
     * @param bool $deceased Indicates whether the constituent is deceased. For individuals only.
     *
     * @return $this
     */
    public function setDeceased($deceased)
    {
        $this->container['deceased'] = $deceased;

        return $this;
    }

    /**
     * Gets deceased_date
     *
     * @return \BurgerDigital\BlackbaudPhpSdk\BurgerDigital\BlackbaudPhpSdk\Models\FuzzyDate
     */
    public function getDeceasedDate()
    {
        return $this->container['deceased_date'];
    }

    /**
     * Sets deceased_date
     *
     * @param \BurgerDigital\BlackbaudPhpSdk\BurgerDigital\BlackbaudPhpSdk\Models\FuzzyDate $deceased_date deceased_date
     *
     * @return $this
     */
    public function setDeceasedDate($deceased_date)
    {
        $this->container['deceased_date'] = $deceased_date;

        return $this;
    }

    /**
     * Gets first
     *
     * @return string
     */
    public function getFirst()
    {
        return $this->container['first'];
    }

    /**
     * Sets first
     *
     * @param string $first The constituent's first name. For individuals only. Character limit: 50.
     *
     * @return $this
     */
    public function setFirst($first)
    {
        $this->container['first'] = $first;

        return $this;
    }

    /**
     * Gets former_name
     *
     * @return string
     */
    public function getFormerName()
    {
        return $this->container['former_name'];
    }

    /**
     * Sets former_name
     *
     * @param string $former_name The constituent's former name. For individuals only. Character limit: 100.
     *
     * @return $this
     */
    public function setFormerName($former_name)
    {
        $this->container['former_name'] = $former_name;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string $gender The constituent's gender. Available values are the entries in the <a href=\"https://developer.sky.blackbaud.com/docs/services/56b76470069a0509c8f1c5b3/operations/ListGenders\"><b>Gender</b></a> table. This property defaults to <i>Unknown</i> if no value is provided. For individuals only.
     *
     * @return $this
     */
    public function setGender($gender)
    {
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets last
     *
     * @return string
     */
    public function getLast()
    {
        return $this->container['last'];
    }

    /**
     * Sets last
     *
     * @param string $last The constituent's last name. For individuals only (required). Character limit: 100.
     *
     * @return $this
     */
    public function setLast($last)
    {
        $this->container['last'] = $last;

        return $this;
    }

    /**
     * Gets middle
     *
     * @return string
     */
    public function getMiddle()
    {
        return $this->container['middle'];
    }

    /**
     * Sets middle
     *
     * @param string $middle The constituent's middle name. For individuals only. Character limit: 50.
     *
     * @return $this
     */
    public function setMiddle($middle)
    {
        $this->container['middle'] = $middle;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name If the constituent's <code>type</code> is <i>Individual</i>, this is a computed field that does not apply to add operations. If the <code>type</code> is <i>Organization</i>, this field is required and represents the organization's name. Character limit: 60.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets preferred_name
     *
     * @return string
     */
    public function getPreferredName()
    {
        return $this->container['preferred_name'];
    }

    /**
     * Sets preferred_name
     *
     * @param string $preferred_name The constituent's preferred name. For individuals only. Character limit: 50.
     *
     * @return $this
     */
    public function setPreferredName($preferred_name)
    {
        $this->container['preferred_name'] = $preferred_name;

        return $this;
    }

    /**
     * Gets suffix
     *
     * @return string
     */
    public function getSuffix()
    {
        return $this->container['suffix'];
    }

    /**
     * Sets suffix
     *
     * @param string $suffix The constituent's primary suffix. Available values are the entries in the <a href=\"https://developer.sky.blackbaud.com/docs/services/56b76470069a0509c8f1c5b3/operations/ListSuffixes\"><b>Suffixes</b></a> table. For individuals only.
     *
     * @return $this
     */
    public function setSuffix($suffix)
    {
        $this->container['suffix'] = $suffix;

        return $this;
    }

    /**
     * Gets suffix_2
     *
     * @return string
     */
    public function getSuffix2()
    {
        return $this->container['suffix_2'];
    }

    /**
     * Sets suffix_2
     *
     * @param string $suffix_2 The constituent's secondary suffix. Available values are the entries in the <a href=\"https://developer.sky.blackbaud.com/docs/services/56b76470069a0509c8f1c5b3/operations/ListSuffixes\"><b>Suffixes</b></a> table. For individuals only.
     *
     * @return $this
     */
    public function setSuffix2($suffix_2)
    {
        $this->container['suffix_2'] = $suffix_2;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title The constituent's primary title. Available values are the entries in the <a href=\"https://developer.sky.blackbaud.com/docs/services/56b76470069a0509c8f1c5b3/operations/ListTitles\"><b>Titles</b></a> table. For individuals only.
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets title_2
     *
     * @return string
     */
    public function getTitle2()
    {
        return $this->container['title_2'];
    }

    /**
     * Sets title_2
     *
     * @param string $title_2 The constituent's secondary title. Available values are the entries in the <a href=\"https://developer.sky.blackbaud.com/docs/services/56b76470069a0509c8f1c5b3/operations/ListTitles\"><b>Titles</b></a> table. For individuals only.
     *
     * @return $this
     */
    public function setTitle2($title_2)
    {
        $this->container['title_2'] = $title_2;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The type of constituent. Available values are <i>Individual</i> and <i>Organization</i>.
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets primary_addressee
     *
     * @return \BurgerDigital\BlackbaudPhpSdk\BurgerDigital\BlackbaudPhpSdk\Models\PrimaryNameFormatEdit
     */
    public function getPrimaryAddressee()
    {
        return $this->container['primary_addressee'];
    }

    /**
     * Sets primary_addressee
     *
     * @param \BurgerDigital\BlackbaudPhpSdk\BurgerDigital\BlackbaudPhpSdk\Models\PrimaryNameFormatEdit $primary_addressee primary_addressee
     *
     * @return $this
     */
    public function setPrimaryAddressee($primary_addressee)
    {
        $this->container['primary_addressee'] = $primary_addressee;

        return $this;
    }

    /**
     * Gets primary_salutation
     *
     * @return \BurgerDigital\BlackbaudPhpSdk\BurgerDigital\BlackbaudPhpSdk\Models\PrimaryNameFormatEdit
     */
    public function getPrimarySalutation()
    {
        return $this->container['primary_salutation'];
    }

    /**
     * Sets primary_salutation
     *
     * @param \BurgerDigital\BlackbaudPhpSdk\BurgerDigital\BlackbaudPhpSdk\Models\PrimaryNameFormatEdit $primary_salutation primary_salutation
     *
     * @return $this
     */
    public function setPrimarySalutation($primary_salutation)
    {
        $this->container['primary_salutation'] = $primary_salutation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
