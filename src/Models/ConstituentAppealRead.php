<?php
/**
 * ConstituentAppealRead
 *
 * PHP version 5
 *
 * @category Class
 * @package  BurgerDigital\BlackbaudPhpSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Constituent
 *
 * This API manages constituent information and related entities such as addresses, phones, emails, and notes.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.24
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BurgerDigital\BlackbaudPhpSdk\BurgerDigital\BlackbaudPhpSdk\Models;

use \ArrayAccess;
use \BurgerDigital\BlackbaudPhpSdk\ObjectSerializer;

/**
 * ConstituentAppealRead Class Doc Comment
 *
 * @category Class
 * @description Constituent appeals are the solicitations received by a constituent to bring in gifts, such as direct mailings, phonathons, auctions, or gala events.
 * @package  BurgerDigital\BlackbaudPhpSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConstituentAppealRead implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ConstituentAppealRead';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'appeal' => '\BurgerDigital\BlackbaudPhpSdk\BurgerDigital\BlackbaudPhpSdk\Models\AppealRead',
'comments' => 'string',
'constituent_id' => 'string',
'date' => '\DateTime',
'finder_number' => 'string',
'mailing_id' => 'string',
'marketing_segment' => 'string',
'marketing_source_code' => 'string',
'package' => '\BurgerDigital\BlackbaudPhpSdk\BurgerDigital\BlackbaudPhpSdk\Models\PackageRead',
'response' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'appeal' => null,
'comments' => null,
'constituent_id' => null,
'date' => 'date-time',
'finder_number' => null,
'mailing_id' => null,
'marketing_segment' => null,
'marketing_source_code' => null,
'package' => null,
'response' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'appeal' => 'appeal',
'comments' => 'comments',
'constituent_id' => 'constituent_id',
'date' => 'date',
'finder_number' => 'finder_number',
'mailing_id' => 'mailing_id',
'marketing_segment' => 'marketing_segment',
'marketing_source_code' => 'marketing_source_code',
'package' => 'package',
'response' => 'response'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'appeal' => 'setAppeal',
'comments' => 'setComments',
'constituent_id' => 'setConstituentId',
'date' => 'setDate',
'finder_number' => 'setFinderNumber',
'mailing_id' => 'setMailingId',
'marketing_segment' => 'setMarketingSegment',
'marketing_source_code' => 'setMarketingSourceCode',
'package' => 'setPackage',
'response' => 'setResponse'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'appeal' => 'getAppeal',
'comments' => 'getComments',
'constituent_id' => 'getConstituentId',
'date' => 'getDate',
'finder_number' => 'getFinderNumber',
'mailing_id' => 'getMailingId',
'marketing_segment' => 'getMarketingSegment',
'marketing_source_code' => 'getMarketingSourceCode',
'package' => 'getPackage',
'response' => 'getResponse'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['appeal'] = isset($data['appeal']) ? $data['appeal'] : null;
        $this->container['comments'] = isset($data['comments']) ? $data['comments'] : null;
        $this->container['constituent_id'] = isset($data['constituent_id']) ? $data['constituent_id'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['finder_number'] = isset($data['finder_number']) ? $data['finder_number'] : null;
        $this->container['mailing_id'] = isset($data['mailing_id']) ? $data['mailing_id'] : null;
        $this->container['marketing_segment'] = isset($data['marketing_segment']) ? $data['marketing_segment'] : null;
        $this->container['marketing_source_code'] = isset($data['marketing_source_code']) ? $data['marketing_source_code'] : null;
        $this->container['package'] = isset($data['package']) ? $data['package'] : null;
        $this->container['response'] = isset($data['response']) ? $data['response'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The immutable system record ID of the constituent appeal.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets appeal
     *
     * @return \BurgerDigital\BlackbaudPhpSdk\BurgerDigital\BlackbaudPhpSdk\Models\AppealRead
     */
    public function getAppeal()
    {
        return $this->container['appeal'];
    }

    /**
     * Sets appeal
     *
     * @param \BurgerDigital\BlackbaudPhpSdk\BurgerDigital\BlackbaudPhpSdk\Models\AppealRead $appeal appeal
     *
     * @return $this
     */
    public function setAppeal($appeal)
    {
        $this->container['appeal'] = $appeal;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string $comments User comments for the constituent appeal.
     *
     * @return $this
     */
    public function setComments($comments)
    {
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets constituent_id
     *
     * @return string
     */
    public function getConstituentId()
    {
        return $this->container['constituent_id'];
    }

    /**
     * Sets constituent_id
     *
     * @param string $constituent_id The immutable system record ID of the constituent associated with the appeal.
     *
     * @return $this
     */
    public function setConstituentId($constituent_id)
    {
        $this->container['constituent_id'] = $constituent_id;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date The constituent appeal date. Includes an offset from UTC in <a href=\"https://tools.ietf.org/html/rfc3339\">ISO-8601 format: </a><i>1969-11-21T10:29:43-04:00</i>.
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets finder_number
     *
     * @return string
     */
    public function getFinderNumber()
    {
        return $this->container['finder_number'];
    }

    /**
     * Sets finder_number
     *
     * @param string $finder_number The Marketing finder number for the constituent appeal.
     *
     * @return $this
     */
    public function setFinderNumber($finder_number)
    {
        $this->container['finder_number'] = $finder_number;

        return $this;
    }

    /**
     * Gets mailing_id
     *
     * @return string
     */
    public function getMailingId()
    {
        return $this->container['mailing_id'];
    }

    /**
     * Sets mailing_id
     *
     * @param string $mailing_id The user-defined mailing identifier for the constituent appeal.
     *
     * @return $this
     */
    public function setMailingId($mailing_id)
    {
        $this->container['mailing_id'] = $mailing_id;

        return $this;
    }

    /**
     * Gets marketing_segment
     *
     * @return string
     */
    public function getMarketingSegment()
    {
        return $this->container['marketing_segment'];
    }

    /**
     * Sets marketing_segment
     *
     * @param string $marketing_segment The marketing segment for the constituent appeal.
     *
     * @return $this
     */
    public function setMarketingSegment($marketing_segment)
    {
        $this->container['marketing_segment'] = $marketing_segment;

        return $this;
    }

    /**
     * Gets marketing_source_code
     *
     * @return string
     */
    public function getMarketingSourceCode()
    {
        return $this->container['marketing_source_code'];
    }

    /**
     * Sets marketing_source_code
     *
     * @param string $marketing_source_code The Marketing source code for the constituent appeal.
     *
     * @return $this
     */
    public function setMarketingSourceCode($marketing_source_code)
    {
        $this->container['marketing_source_code'] = $marketing_source_code;

        return $this;
    }

    /**
     * Gets package
     *
     * @return \BurgerDigital\BlackbaudPhpSdk\BurgerDigital\BlackbaudPhpSdk\Models\PackageRead
     */
    public function getPackage()
    {
        return $this->container['package'];
    }

    /**
     * Sets package
     *
     * @param \BurgerDigital\BlackbaudPhpSdk\BurgerDigital\BlackbaudPhpSdk\Models\PackageRead $package package
     *
     * @return $this
     */
    public function setPackage($package)
    {
        $this->container['package'] = $package;

        return $this;
    }

    /**
     * Gets response
     *
     * @return string
     */
    public function getResponse()
    {
        return $this->container['response'];
    }

    /**
     * Sets response
     *
     * @param string $response The response for the constituent appeal.
     *
     * @return $this
     */
    public function setResponse($response)
    {
        $this->container['response'] = $response;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
