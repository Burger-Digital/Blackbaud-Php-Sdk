<?php
/**
 * FundraiserAssignmentRead
 *
 * PHP version 5
 *
 * @category Class
 * @package  BurgerDigital\BlackbaudPhpSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Constituent
 *
 * This API manages constituent information and related entities such as addresses, phones, emails, and notes.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.24
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BurgerDigital\BlackbaudPhpSdk\BurgerDigital\BlackbaudPhpSdk\Models;

use \ArrayAccess;
use \BurgerDigital\BlackbaudPhpSdk\ObjectSerializer;

/**
 * FundraiserAssignmentRead Class Doc Comment
 *
 * @category Class
 * @description Fundraiser constituents interact with other constituents on behalf of your organization to cultivate relationships and request donations. Fundraiser assignments allow you to assign specific constituents to fundraisers for solicitation purposes
 * @package  BurgerDigital\BlackbaudPhpSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FundraiserAssignmentRead implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FundraiserAssignmentRead';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'amount' => '\BurgerDigital\BlackbaudPhpSdk\BurgerDigital\BlackbaudPhpSdk\Models\Currency',
'appeal_id' => 'string',
'campaign_id' => 'string',
'constituent_id' => 'string',
'end' => '\DateTime',
'fund_id' => 'string',
'fundraiser_id' => 'string',
'start' => '\DateTime',
'type' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'amount' => null,
'appeal_id' => null,
'campaign_id' => null,
'constituent_id' => null,
'end' => 'date-time',
'fund_id' => null,
'fundraiser_id' => null,
'start' => 'date-time',
'type' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'amount' => 'amount',
'appeal_id' => 'appeal_id',
'campaign_id' => 'campaign_id',
'constituent_id' => 'constituent_id',
'end' => 'end',
'fund_id' => 'fund_id',
'fundraiser_id' => 'fundraiser_id',
'start' => 'start',
'type' => 'type'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'amount' => 'setAmount',
'appeal_id' => 'setAppealId',
'campaign_id' => 'setCampaignId',
'constituent_id' => 'setConstituentId',
'end' => 'setEnd',
'fund_id' => 'setFundId',
'fundraiser_id' => 'setFundraiserId',
'start' => 'setStart',
'type' => 'setType'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'amount' => 'getAmount',
'appeal_id' => 'getAppealId',
'campaign_id' => 'getCampaignId',
'constituent_id' => 'getConstituentId',
'end' => 'getEnd',
'fund_id' => 'getFundId',
'fundraiser_id' => 'getFundraiserId',
'start' => 'getStart',
'type' => 'getType'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['appeal_id'] = isset($data['appeal_id']) ? $data['appeal_id'] : null;
        $this->container['campaign_id'] = isset($data['campaign_id']) ? $data['campaign_id'] : null;
        $this->container['constituent_id'] = isset($data['constituent_id']) ? $data['constituent_id'] : null;
        $this->container['end'] = isset($data['end']) ? $data['end'] : null;
        $this->container['fund_id'] = isset($data['fund_id']) ? $data['fund_id'] : null;
        $this->container['fundraiser_id'] = isset($data['fundraiser_id']) ? $data['fundraiser_id'] : null;
        $this->container['start'] = isset($data['start']) ? $data['start'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The immutable system record ID of the fundraiser assignment.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return \BurgerDigital\BlackbaudPhpSdk\BurgerDigital\BlackbaudPhpSdk\Models\Currency
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param \BurgerDigital\BlackbaudPhpSdk\BurgerDigital\BlackbaudPhpSdk\Models\Currency $amount amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets appeal_id
     *
     * @return string
     */
    public function getAppealId()
    {
        return $this->container['appeal_id'];
    }

    /**
     * Sets appeal_id
     *
     * @param string $appeal_id The immutable system record ID of the appeal the fundraiser should use to request gifts.
     *
     * @return $this
     */
    public function setAppealId($appeal_id)
    {
        $this->container['appeal_id'] = $appeal_id;

        return $this;
    }

    /**
     * Gets campaign_id
     *
     * @return string
     */
    public function getCampaignId()
    {
        return $this->container['campaign_id'];
    }

    /**
     * Sets campaign_id
     *
     * @param string $campaign_id The immutable system record ID of the campaign to apply resulting gifts to.
     *
     * @return $this
     */
    public function setCampaignId($campaign_id)
    {
        $this->container['campaign_id'] = $campaign_id;

        return $this;
    }

    /**
     * Gets constituent_id
     *
     * @return string
     */
    public function getConstituentId()
    {
        return $this->container['constituent_id'];
    }

    /**
     * Sets constituent_id
     *
     * @param string $constituent_id The immutable system record ID of the constituent assigned to the fundraiser.
     *
     * @return $this
     */
    public function setConstituentId($constituent_id)
    {
        $this->container['constituent_id'] = $constituent_id;

        return $this;
    }

    /**
     * Gets end
     *
     * @return \DateTime
     */
    public function getEnd()
    {
        return $this->container['end'];
    }

    /**
     * Sets end
     *
     * @param \DateTime $end The fundraiser assignment end date. Uses <a href=\"https://tools.ietf.org/html/rfc3339\">ISO-8601 format: </a><i>2017-05-17T00:00:00</i>.
     *
     * @return $this
     */
    public function setEnd($end)
    {
        $this->container['end'] = $end;

        return $this;
    }

    /**
     * Gets fund_id
     *
     * @return string
     */
    public function getFundId()
    {
        return $this->container['fund_id'];
    }

    /**
     * Sets fund_id
     *
     * @param string $fund_id The immutable system record ID of the fund any resulting gifts should be applied to. If a restricted fund is selected, only campaigns and appeals associated with that fund may be selected.
     *
     * @return $this
     */
    public function setFundId($fund_id)
    {
        $this->container['fund_id'] = $fund_id;

        return $this;
    }

    /**
     * Gets fundraiser_id
     *
     * @return string
     */
    public function getFundraiserId()
    {
        return $this->container['fundraiser_id'];
    }

    /**
     * Sets fundraiser_id
     *
     * @param string $fundraiser_id The immutable system record ID of the fundraiser.
     *
     * @return $this
     */
    public function setFundraiserId($fundraiser_id)
    {
        $this->container['fundraiser_id'] = $fundraiser_id;

        return $this;
    }

    /**
     * Gets start
     *
     * @return \DateTime
     */
    public function getStart()
    {
        return $this->container['start'];
    }

    /**
     * Sets start
     *
     * @param \DateTime $start The fundraiser assignment start date. Uses <a href=\"https://tools.ietf.org/html/rfc3339\">ISO-8601 format: </a><i>2017-01-29T00:00:00</i>.
     *
     * @return $this
     */
    public function setStart($start)
    {
        $this->container['start'] = $start;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The type of fundraiser. Available values are the entries in the <a href=\"https://developer.sky.blackbaud.com/docs/services/58bdd6c8d7dcde06046081d7/operations/5ad64755a9db9517f8d9767e\"><b>Solicitor Type</b></a> table.
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
