<?php
/**
 * NameFormatApi
 * PHP version 7.2
 *
 * @category Class
 * @package  BurgerDigital\BlackbaudPhpSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Constituent
 *
 * This API manages constituent information and related entities such as addresses, phones, emails, and notes.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BurgerDigital\BlackbaudPhpSdk\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use BurgerDigital\BlackbaudPhpSdk\ApiException;
use BurgerDigital\BlackbaudPhpSdk\Configuration;
use BurgerDigital\BlackbaudPhpSdk\HeaderSelector;
use BurgerDigital\BlackbaudPhpSdk\ObjectSerializer;

/**
 * NameFormatApi Class Doc Comment
 *
 * @category Class
 * @package  BurgerDigital\BlackbaudPhpSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class NameFormatApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createConstituentNameFormat
     *
     * Name format (Create)
     *
     * @param  \BurgerDigital\BlackbaudPhpSdk\Model\NameFormatAdd $name_format_add An object that represents the name format to create. (optional)
     *
     * @throws \BurgerDigital\BlackbaudPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BurgerDigital\BlackbaudPhpSdk\Model\PostResponse
     */
    public function createConstituentNameFormat($name_format_add = null)
    {
        list($response) = $this->createConstituentNameFormatWithHttpInfo($name_format_add);
        return $response;
    }

    /**
     * Operation createConstituentNameFormatWithHttpInfo
     *
     * Name format (Create)
     *
     * @param  \BurgerDigital\BlackbaudPhpSdk\Model\NameFormatAdd $name_format_add An object that represents the name format to create. (optional)
     *
     * @throws \BurgerDigital\BlackbaudPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BurgerDigital\BlackbaudPhpSdk\Model\PostResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createConstituentNameFormatWithHttpInfo($name_format_add = null)
    {
        $request = $this->createConstituentNameFormatRequest($name_format_add);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\BurgerDigital\BlackbaudPhpSdk\Model\PostResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BurgerDigital\BlackbaudPhpSdk\Model\PostResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\BurgerDigital\BlackbaudPhpSdk\Model\PostResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BurgerDigital\BlackbaudPhpSdk\Model\PostResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createConstituentNameFormatAsync
     *
     * Name format (Create)
     *
     * @param  \BurgerDigital\BlackbaudPhpSdk\Model\NameFormatAdd $name_format_add An object that represents the name format to create. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createConstituentNameFormatAsync($name_format_add = null)
    {
        return $this->createConstituentNameFormatAsyncWithHttpInfo($name_format_add)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createConstituentNameFormatAsyncWithHttpInfo
     *
     * Name format (Create)
     *
     * @param  \BurgerDigital\BlackbaudPhpSdk\Model\NameFormatAdd $name_format_add An object that represents the name format to create. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createConstituentNameFormatAsyncWithHttpInfo($name_format_add = null)
    {
        $returnType = '\BurgerDigital\BlackbaudPhpSdk\Model\PostResponse';
        $request = $this->createConstituentNameFormatRequest($name_format_add);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createConstituentNameFormat'
     *
     * @param  \BurgerDigital\BlackbaudPhpSdk\Model\NameFormatAdd $name_format_add An object that represents the name format to create. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createConstituentNameFormatRequest($name_format_add = null)
    {

        $resourcePath = '/nameformats';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($name_format_add)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($name_format_add));
            } else {
                $httpBody = $name_format_add;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createConstituentPrimaryNameFormat
     *
     * Primary name format (Create)
     *
     * @param  \BurgerDigital\BlackbaudPhpSdk\Model\PrimaryNameFormatAdd $primary_name_format_add An object that represents the primary name format to create. (optional)
     *
     * @throws \BurgerDigital\BlackbaudPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BurgerDigital\BlackbaudPhpSdk\Model\PostResponse
     */
    public function createConstituentPrimaryNameFormat($primary_name_format_add = null)
    {
        list($response) = $this->createConstituentPrimaryNameFormatWithHttpInfo($primary_name_format_add);
        return $response;
    }

    /**
     * Operation createConstituentPrimaryNameFormatWithHttpInfo
     *
     * Primary name format (Create)
     *
     * @param  \BurgerDigital\BlackbaudPhpSdk\Model\PrimaryNameFormatAdd $primary_name_format_add An object that represents the primary name format to create. (optional)
     *
     * @throws \BurgerDigital\BlackbaudPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BurgerDigital\BlackbaudPhpSdk\Model\PostResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createConstituentPrimaryNameFormatWithHttpInfo($primary_name_format_add = null)
    {
        $request = $this->createConstituentPrimaryNameFormatRequest($primary_name_format_add);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\BurgerDigital\BlackbaudPhpSdk\Model\PostResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BurgerDigital\BlackbaudPhpSdk\Model\PostResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\BurgerDigital\BlackbaudPhpSdk\Model\PostResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BurgerDigital\BlackbaudPhpSdk\Model\PostResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createConstituentPrimaryNameFormatAsync
     *
     * Primary name format (Create)
     *
     * @param  \BurgerDigital\BlackbaudPhpSdk\Model\PrimaryNameFormatAdd $primary_name_format_add An object that represents the primary name format to create. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createConstituentPrimaryNameFormatAsync($primary_name_format_add = null)
    {
        return $this->createConstituentPrimaryNameFormatAsyncWithHttpInfo($primary_name_format_add)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createConstituentPrimaryNameFormatAsyncWithHttpInfo
     *
     * Primary name format (Create)
     *
     * @param  \BurgerDigital\BlackbaudPhpSdk\Model\PrimaryNameFormatAdd $primary_name_format_add An object that represents the primary name format to create. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createConstituentPrimaryNameFormatAsyncWithHttpInfo($primary_name_format_add = null)
    {
        $returnType = '\BurgerDigital\BlackbaudPhpSdk\Model\PostResponse';
        $request = $this->createConstituentPrimaryNameFormatRequest($primary_name_format_add);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createConstituentPrimaryNameFormat'
     *
     * @param  \BurgerDigital\BlackbaudPhpSdk\Model\PrimaryNameFormatAdd $primary_name_format_add An object that represents the primary name format to create. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createConstituentPrimaryNameFormatRequest($primary_name_format_add = null)
    {

        $resourcePath = '/primarynameformats';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($primary_name_format_add)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($primary_name_format_add));
            } else {
                $httpBody = $primary_name_format_add;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteConstituentNameFormat
     *
     * Name format (Delete)
     *
     * @param  string $name_format_id The immutable system record ID of the constituent name format to delete. (required)
     *
     * @throws \BurgerDigital\BlackbaudPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteConstituentNameFormat($name_format_id)
    {
        $this->deleteConstituentNameFormatWithHttpInfo($name_format_id);
    }

    /**
     * Operation deleteConstituentNameFormatWithHttpInfo
     *
     * Name format (Delete)
     *
     * @param  string $name_format_id The immutable system record ID of the constituent name format to delete. (required)
     *
     * @throws \BurgerDigital\BlackbaudPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteConstituentNameFormatWithHttpInfo($name_format_id)
    {
        $request = $this->deleteConstituentNameFormatRequest($name_format_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteConstituentNameFormatAsync
     *
     * Name format (Delete)
     *
     * @param  string $name_format_id The immutable system record ID of the constituent name format to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteConstituentNameFormatAsync($name_format_id)
    {
        return $this->deleteConstituentNameFormatAsyncWithHttpInfo($name_format_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteConstituentNameFormatAsyncWithHttpInfo
     *
     * Name format (Delete)
     *
     * @param  string $name_format_id The immutable system record ID of the constituent name format to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteConstituentNameFormatAsyncWithHttpInfo($name_format_id)
    {
        $returnType = '';
        $request = $this->deleteConstituentNameFormatRequest($name_format_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteConstituentNameFormat'
     *
     * @param  string $name_format_id The immutable system record ID of the constituent name format to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteConstituentNameFormatRequest($name_format_id)
    {
        // verify the required parameter 'name_format_id' is set
        if ($name_format_id === null || (is_array($name_format_id) && count($name_format_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name_format_id when calling deleteConstituentNameFormat'
            );
        }

        $resourcePath = '/nameformats/{name_format_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($name_format_id !== null) {
            $resourcePath = str_replace(
                '{' . 'name_format_id' . '}',
                ObjectSerializer::toPathValue($name_format_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteConstituentPrimaryNameFormat
     *
     * Primary name format (Delete)
     *
     * @param  string $primary_name_format_id The immutable system record ID of the constituent primary name format to delete. (required)
     *
     * @throws \BurgerDigital\BlackbaudPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteConstituentPrimaryNameFormat($primary_name_format_id)
    {
        $this->deleteConstituentPrimaryNameFormatWithHttpInfo($primary_name_format_id);
    }

    /**
     * Operation deleteConstituentPrimaryNameFormatWithHttpInfo
     *
     * Primary name format (Delete)
     *
     * @param  string $primary_name_format_id The immutable system record ID of the constituent primary name format to delete. (required)
     *
     * @throws \BurgerDigital\BlackbaudPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteConstituentPrimaryNameFormatWithHttpInfo($primary_name_format_id)
    {
        $request = $this->deleteConstituentPrimaryNameFormatRequest($primary_name_format_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteConstituentPrimaryNameFormatAsync
     *
     * Primary name format (Delete)
     *
     * @param  string $primary_name_format_id The immutable system record ID of the constituent primary name format to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteConstituentPrimaryNameFormatAsync($primary_name_format_id)
    {
        return $this->deleteConstituentPrimaryNameFormatAsyncWithHttpInfo($primary_name_format_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteConstituentPrimaryNameFormatAsyncWithHttpInfo
     *
     * Primary name format (Delete)
     *
     * @param  string $primary_name_format_id The immutable system record ID of the constituent primary name format to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteConstituentPrimaryNameFormatAsyncWithHttpInfo($primary_name_format_id)
    {
        $returnType = '';
        $request = $this->deleteConstituentPrimaryNameFormatRequest($primary_name_format_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteConstituentPrimaryNameFormat'
     *
     * @param  string $primary_name_format_id The immutable system record ID of the constituent primary name format to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteConstituentPrimaryNameFormatRequest($primary_name_format_id)
    {
        // verify the required parameter 'primary_name_format_id' is set
        if ($primary_name_format_id === null || (is_array($primary_name_format_id) && count($primary_name_format_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $primary_name_format_id when calling deleteConstituentPrimaryNameFormat'
            );
        }

        $resourcePath = '/primarynameformats/{primary_name_format_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($primary_name_format_id !== null) {
            $resourcePath = str_replace(
                '{' . 'primary_name_format_id' . '}',
                ObjectSerializer::toPathValue($primary_name_format_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation editConstituentNameFormat
     *
     * Name format (Edit)
     *
     * @param  string $name_format_id The immutable system record ID of the name format to edit. (required)
     * @param  \BurgerDigital\BlackbaudPhpSdk\Model\NameFormatEdit $name_format_edit An object that represents the properties of the name format to edit. (optional)
     *
     * @throws \BurgerDigital\BlackbaudPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function editConstituentNameFormat($name_format_id, $name_format_edit = null)
    {
        $this->editConstituentNameFormatWithHttpInfo($name_format_id, $name_format_edit);
    }

    /**
     * Operation editConstituentNameFormatWithHttpInfo
     *
     * Name format (Edit)
     *
     * @param  string $name_format_id The immutable system record ID of the name format to edit. (required)
     * @param  \BurgerDigital\BlackbaudPhpSdk\Model\NameFormatEdit $name_format_edit An object that represents the properties of the name format to edit. (optional)
     *
     * @throws \BurgerDigital\BlackbaudPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function editConstituentNameFormatWithHttpInfo($name_format_id, $name_format_edit = null)
    {
        $request = $this->editConstituentNameFormatRequest($name_format_id, $name_format_edit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation editConstituentNameFormatAsync
     *
     * Name format (Edit)
     *
     * @param  string $name_format_id The immutable system record ID of the name format to edit. (required)
     * @param  \BurgerDigital\BlackbaudPhpSdk\Model\NameFormatEdit $name_format_edit An object that represents the properties of the name format to edit. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editConstituentNameFormatAsync($name_format_id, $name_format_edit = null)
    {
        return $this->editConstituentNameFormatAsyncWithHttpInfo($name_format_id, $name_format_edit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation editConstituentNameFormatAsyncWithHttpInfo
     *
     * Name format (Edit)
     *
     * @param  string $name_format_id The immutable system record ID of the name format to edit. (required)
     * @param  \BurgerDigital\BlackbaudPhpSdk\Model\NameFormatEdit $name_format_edit An object that represents the properties of the name format to edit. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editConstituentNameFormatAsyncWithHttpInfo($name_format_id, $name_format_edit = null)
    {
        $returnType = '';
        $request = $this->editConstituentNameFormatRequest($name_format_id, $name_format_edit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'editConstituentNameFormat'
     *
     * @param  string $name_format_id The immutable system record ID of the name format to edit. (required)
     * @param  \BurgerDigital\BlackbaudPhpSdk\Model\NameFormatEdit $name_format_edit An object that represents the properties of the name format to edit. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function editConstituentNameFormatRequest($name_format_id, $name_format_edit = null)
    {
        // verify the required parameter 'name_format_id' is set
        if ($name_format_id === null || (is_array($name_format_id) && count($name_format_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name_format_id when calling editConstituentNameFormat'
            );
        }

        $resourcePath = '/nameformats/{name_format_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($name_format_id !== null) {
            $resourcePath = str_replace(
                '{' . 'name_format_id' . '}',
                ObjectSerializer::toPathValue($name_format_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($name_format_edit)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($name_format_edit));
            } else {
                $httpBody = $name_format_edit;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation editConstituentPrimaryNameFormat
     *
     * Primary name format (Edit)
     *
     * @param  string $primary_name_format_id The immutable system record ID of the primary name format to edit. (required)
     * @param  \BurgerDigital\BlackbaudPhpSdk\Model\PrimaryNameFormatEdit $primary_name_format_edit An object that represents the properties of the primary name format to edit. (optional)
     *
     * @throws \BurgerDigital\BlackbaudPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function editConstituentPrimaryNameFormat($primary_name_format_id, $primary_name_format_edit = null)
    {
        $this->editConstituentPrimaryNameFormatWithHttpInfo($primary_name_format_id, $primary_name_format_edit);
    }

    /**
     * Operation editConstituentPrimaryNameFormatWithHttpInfo
     *
     * Primary name format (Edit)
     *
     * @param  string $primary_name_format_id The immutable system record ID of the primary name format to edit. (required)
     * @param  \BurgerDigital\BlackbaudPhpSdk\Model\PrimaryNameFormatEdit $primary_name_format_edit An object that represents the properties of the primary name format to edit. (optional)
     *
     * @throws \BurgerDigital\BlackbaudPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function editConstituentPrimaryNameFormatWithHttpInfo($primary_name_format_id, $primary_name_format_edit = null)
    {
        $request = $this->editConstituentPrimaryNameFormatRequest($primary_name_format_id, $primary_name_format_edit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation editConstituentPrimaryNameFormatAsync
     *
     * Primary name format (Edit)
     *
     * @param  string $primary_name_format_id The immutable system record ID of the primary name format to edit. (required)
     * @param  \BurgerDigital\BlackbaudPhpSdk\Model\PrimaryNameFormatEdit $primary_name_format_edit An object that represents the properties of the primary name format to edit. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editConstituentPrimaryNameFormatAsync($primary_name_format_id, $primary_name_format_edit = null)
    {
        return $this->editConstituentPrimaryNameFormatAsyncWithHttpInfo($primary_name_format_id, $primary_name_format_edit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation editConstituentPrimaryNameFormatAsyncWithHttpInfo
     *
     * Primary name format (Edit)
     *
     * @param  string $primary_name_format_id The immutable system record ID of the primary name format to edit. (required)
     * @param  \BurgerDigital\BlackbaudPhpSdk\Model\PrimaryNameFormatEdit $primary_name_format_edit An object that represents the properties of the primary name format to edit. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editConstituentPrimaryNameFormatAsyncWithHttpInfo($primary_name_format_id, $primary_name_format_edit = null)
    {
        $returnType = '';
        $request = $this->editConstituentPrimaryNameFormatRequest($primary_name_format_id, $primary_name_format_edit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'editConstituentPrimaryNameFormat'
     *
     * @param  string $primary_name_format_id The immutable system record ID of the primary name format to edit. (required)
     * @param  \BurgerDigital\BlackbaudPhpSdk\Model\PrimaryNameFormatEdit $primary_name_format_edit An object that represents the properties of the primary name format to edit. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function editConstituentPrimaryNameFormatRequest($primary_name_format_id, $primary_name_format_edit = null)
    {
        // verify the required parameter 'primary_name_format_id' is set
        if ($primary_name_format_id === null || (is_array($primary_name_format_id) && count($primary_name_format_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $primary_name_format_id when calling editConstituentPrimaryNameFormat'
            );
        }

        $resourcePath = '/primarynameformats/{primary_name_format_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($primary_name_format_id !== null) {
            $resourcePath = str_replace(
                '{' . 'primary_name_format_id' . '}',
                ObjectSerializer::toPathValue($primary_name_format_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($primary_name_format_edit)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($primary_name_format_edit));
            } else {
                $httpBody = $primary_name_format_edit;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getConstituentNameFormat
     *
     * Name format (Get)
     *
     * @param  string $name_format_id The immutable system record ID of the name format to retrieve. (required)
     *
     * @throws \BurgerDigital\BlackbaudPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BurgerDigital\BlackbaudPhpSdk\Model\NameFormatSummaryRead
     */
    public function getConstituentNameFormat($name_format_id)
    {
        list($response) = $this->getConstituentNameFormatWithHttpInfo($name_format_id);
        return $response;
    }

    /**
     * Operation getConstituentNameFormatWithHttpInfo
     *
     * Name format (Get)
     *
     * @param  string $name_format_id The immutable system record ID of the name format to retrieve. (required)
     *
     * @throws \BurgerDigital\BlackbaudPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BurgerDigital\BlackbaudPhpSdk\Model\NameFormatSummaryRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function getConstituentNameFormatWithHttpInfo($name_format_id)
    {
        $request = $this->getConstituentNameFormatRequest($name_format_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\BurgerDigital\BlackbaudPhpSdk\Model\NameFormatSummaryRead' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BurgerDigital\BlackbaudPhpSdk\Model\NameFormatSummaryRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\BurgerDigital\BlackbaudPhpSdk\Model\NameFormatSummaryRead';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BurgerDigital\BlackbaudPhpSdk\Model\NameFormatSummaryRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getConstituentNameFormatAsync
     *
     * Name format (Get)
     *
     * @param  string $name_format_id The immutable system record ID of the name format to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConstituentNameFormatAsync($name_format_id)
    {
        return $this->getConstituentNameFormatAsyncWithHttpInfo($name_format_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getConstituentNameFormatAsyncWithHttpInfo
     *
     * Name format (Get)
     *
     * @param  string $name_format_id The immutable system record ID of the name format to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConstituentNameFormatAsyncWithHttpInfo($name_format_id)
    {
        $returnType = '\BurgerDigital\BlackbaudPhpSdk\Model\NameFormatSummaryRead';
        $request = $this->getConstituentNameFormatRequest($name_format_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getConstituentNameFormat'
     *
     * @param  string $name_format_id The immutable system record ID of the name format to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getConstituentNameFormatRequest($name_format_id)
    {
        // verify the required parameter 'name_format_id' is set
        if ($name_format_id === null || (is_array($name_format_id) && count($name_format_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name_format_id when calling getConstituentNameFormat'
            );
        }

        $resourcePath = '/constituents/nameformats/{name_format_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($name_format_id !== null) {
            $resourcePath = str_replace(
                '{' . 'name_format_id' . '}',
                ObjectSerializer::toPathValue($name_format_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getConstituentNameFormatSummary
     *
     * Name format summary (Get)
     *
     * @param  string $constituent_id The immutable system record ID of the constituent to retrieve the name format summary for. (required)
     *
     * @throws \BurgerDigital\BlackbaudPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BurgerDigital\BlackbaudPhpSdk\Model\NameFormatSummaryRead
     */
    public function getConstituentNameFormatSummary($constituent_id)
    {
        list($response) = $this->getConstituentNameFormatSummaryWithHttpInfo($constituent_id);
        return $response;
    }

    /**
     * Operation getConstituentNameFormatSummaryWithHttpInfo
     *
     * Name format summary (Get)
     *
     * @param  string $constituent_id The immutable system record ID of the constituent to retrieve the name format summary for. (required)
     *
     * @throws \BurgerDigital\BlackbaudPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BurgerDigital\BlackbaudPhpSdk\Model\NameFormatSummaryRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function getConstituentNameFormatSummaryWithHttpInfo($constituent_id)
    {
        $request = $this->getConstituentNameFormatSummaryRequest($constituent_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\BurgerDigital\BlackbaudPhpSdk\Model\NameFormatSummaryRead' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BurgerDigital\BlackbaudPhpSdk\Model\NameFormatSummaryRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\BurgerDigital\BlackbaudPhpSdk\Model\NameFormatSummaryRead';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BurgerDigital\BlackbaudPhpSdk\Model\NameFormatSummaryRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getConstituentNameFormatSummaryAsync
     *
     * Name format summary (Get)
     *
     * @param  string $constituent_id The immutable system record ID of the constituent to retrieve the name format summary for. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConstituentNameFormatSummaryAsync($constituent_id)
    {
        return $this->getConstituentNameFormatSummaryAsyncWithHttpInfo($constituent_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getConstituentNameFormatSummaryAsyncWithHttpInfo
     *
     * Name format summary (Get)
     *
     * @param  string $constituent_id The immutable system record ID of the constituent to retrieve the name format summary for. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConstituentNameFormatSummaryAsyncWithHttpInfo($constituent_id)
    {
        $returnType = '\BurgerDigital\BlackbaudPhpSdk\Model\NameFormatSummaryRead';
        $request = $this->getConstituentNameFormatSummaryRequest($constituent_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getConstituentNameFormatSummary'
     *
     * @param  string $constituent_id The immutable system record ID of the constituent to retrieve the name format summary for. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getConstituentNameFormatSummaryRequest($constituent_id)
    {
        // verify the required parameter 'constituent_id' is set
        if ($constituent_id === null || (is_array($constituent_id) && count($constituent_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $constituent_id when calling getConstituentNameFormatSummary'
            );
        }

        $resourcePath = '/constituents/{constituent_id}/nameformats/summary';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($constituent_id !== null) {
            $resourcePath = str_replace(
                '{' . 'constituent_id' . '}',
                ObjectSerializer::toPathValue($constituent_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listNameFormatConfigurations
     *
     * Name format configuration list
     *
     * @param  string $constituent_id The ID of the constituent to display the name format configurations in. (optional)
     * @param  int $limit Format - int32. Represents the number of records to return. The default is 500. The maximum is 5000. (optional)
     * @param  int $offset Format - int32. Represents the number of records to skip. For use with pagination. (optional)
     *
     * @throws \BurgerDigital\BlackbaudPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BurgerDigital\BlackbaudPhpSdk\Model\ApiCollectionNameFormatConfigurationRead
     */
    public function listNameFormatConfigurations($constituent_id = null, $limit = null, $offset = null)
    {
        list($response) = $this->listNameFormatConfigurationsWithHttpInfo($constituent_id, $limit, $offset);
        return $response;
    }

    /**
     * Operation listNameFormatConfigurationsWithHttpInfo
     *
     * Name format configuration list
     *
     * @param  string $constituent_id The ID of the constituent to display the name format configurations in. (optional)
     * @param  int $limit Format - int32. Represents the number of records to return. The default is 500. The maximum is 5000. (optional)
     * @param  int $offset Format - int32. Represents the number of records to skip. For use with pagination. (optional)
     *
     * @throws \BurgerDigital\BlackbaudPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BurgerDigital\BlackbaudPhpSdk\Model\ApiCollectionNameFormatConfigurationRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function listNameFormatConfigurationsWithHttpInfo($constituent_id = null, $limit = null, $offset = null)
    {
        $request = $this->listNameFormatConfigurationsRequest($constituent_id, $limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\BurgerDigital\BlackbaudPhpSdk\Model\ApiCollectionNameFormatConfigurationRead' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BurgerDigital\BlackbaudPhpSdk\Model\ApiCollectionNameFormatConfigurationRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\BurgerDigital\BlackbaudPhpSdk\Model\ApiCollectionNameFormatConfigurationRead';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BurgerDigital\BlackbaudPhpSdk\Model\ApiCollectionNameFormatConfigurationRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listNameFormatConfigurationsAsync
     *
     * Name format configuration list
     *
     * @param  string $constituent_id The ID of the constituent to display the name format configurations in. (optional)
     * @param  int $limit Format - int32. Represents the number of records to return. The default is 500. The maximum is 5000. (optional)
     * @param  int $offset Format - int32. Represents the number of records to skip. For use with pagination. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listNameFormatConfigurationsAsync($constituent_id = null, $limit = null, $offset = null)
    {
        return $this->listNameFormatConfigurationsAsyncWithHttpInfo($constituent_id, $limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listNameFormatConfigurationsAsyncWithHttpInfo
     *
     * Name format configuration list
     *
     * @param  string $constituent_id The ID of the constituent to display the name format configurations in. (optional)
     * @param  int $limit Format - int32. Represents the number of records to return. The default is 500. The maximum is 5000. (optional)
     * @param  int $offset Format - int32. Represents the number of records to skip. For use with pagination. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listNameFormatConfigurationsAsyncWithHttpInfo($constituent_id = null, $limit = null, $offset = null)
    {
        $returnType = '\BurgerDigital\BlackbaudPhpSdk\Model\ApiCollectionNameFormatConfigurationRead';
        $request = $this->listNameFormatConfigurationsRequest($constituent_id, $limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listNameFormatConfigurations'
     *
     * @param  string $constituent_id The ID of the constituent to display the name format configurations in. (optional)
     * @param  int $limit Format - int32. Represents the number of records to return. The default is 500. The maximum is 5000. (optional)
     * @param  int $offset Format - int32. Represents the number of records to skip. For use with pagination. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listNameFormatConfigurationsRequest($constituent_id = null, $limit = null, $offset = null)
    {

        $resourcePath = '/nameformatconfigurations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($constituent_id)) {
            $constituent_id = ObjectSerializer::serializeCollection($constituent_id, '', true);
        }
        if ($constituent_id !== null) {
            $queryParams['constituent_id'] = $constituent_id;
        }
        // query params
        if (is_array($limit)) {
            $limit = ObjectSerializer::serializeCollection($limit, '', true);
        }
        if ($limit !== null) {
            $queryParams['limit'] = $limit;
        }
        // query params
        if (is_array($offset)) {
            $offset = ObjectSerializer::serializeCollection($offset, '', true);
        }
        if ($offset !== null) {
            $queryParams['offset'] = $offset;
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listNameFormatTypes
     *
     * Name format types
     *
     *
     * @throws \BurgerDigital\BlackbaudPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BurgerDigital\BlackbaudPhpSdk\Model\ApiCollectionString
     */
    public function listNameFormatTypes()
    {
        list($response) = $this->listNameFormatTypesWithHttpInfo();
        return $response;
    }

    /**
     * Operation listNameFormatTypesWithHttpInfo
     *
     * Name format types
     *
     *
     * @throws \BurgerDigital\BlackbaudPhpSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BurgerDigital\BlackbaudPhpSdk\Model\ApiCollectionString, HTTP status code, HTTP response headers (array of strings)
     */
    public function listNameFormatTypesWithHttpInfo()
    {
        $request = $this->listNameFormatTypesRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\BurgerDigital\BlackbaudPhpSdk\Model\ApiCollectionString' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BurgerDigital\BlackbaudPhpSdk\Model\ApiCollectionString', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\BurgerDigital\BlackbaudPhpSdk\Model\ApiCollectionString';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BurgerDigital\BlackbaudPhpSdk\Model\ApiCollectionString',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listNameFormatTypesAsync
     *
     * Name format types
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listNameFormatTypesAsync()
    {
        return $this->listNameFormatTypesAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listNameFormatTypesAsyncWithHttpInfo
     *
     * Name format types
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listNameFormatTypesAsyncWithHttpInfo()
    {
        $returnType = '\BurgerDigital\BlackbaudPhpSdk\Model\ApiCollectionString';
        $request = $this->listNameFormatTypesRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listNameFormatTypes'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listNameFormatTypesRequest()
    {

        $resourcePath = '/nameformattypes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
