<?php
/**
 * LifetimeGivingRead
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  BurgerDigital\BlackbaudPhpSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Constituent
 *
 * This API manages constituent information and related entities such as addresses, phones, emails, and notes.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BurgerDigital\BlackbaudPhpSdk\Model;

use \ArrayAccess;
use \BurgerDigital\BlackbaudPhpSdk\ObjectSerializer;

/**
 * LifetimeGivingRead Class Doc Comment
 *
 * @category Class
 * @description Lifetime giving represents cumulative information about giving history throughout a constituentâ€™s association with your organization.
 * @package  BurgerDigital\BlackbaudPhpSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class LifetimeGivingRead implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'LifetimeGivingRead';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'consecutive_years_given' => 'int',
        'constituent_id' => 'string',
        'total_committed_matching_gifts' => '\BurgerDigital\BlackbaudPhpSdk\Model\Currency',
        'total_giving' => '\BurgerDigital\BlackbaudPhpSdk\Model\Currency',
        'total_pledge_balance' => '\BurgerDigital\BlackbaudPhpSdk\Model\Currency',
        'total_received_giving' => '\BurgerDigital\BlackbaudPhpSdk\Model\Currency',
        'total_received_matching_gifts' => '\BurgerDigital\BlackbaudPhpSdk\Model\Currency',
        'total_soft_credits' => '\BurgerDigital\BlackbaudPhpSdk\Model\Currency',
        'total_years_given' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'consecutive_years_given' => 'int32',
        'constituent_id' => null,
        'total_committed_matching_gifts' => null,
        'total_giving' => null,
        'total_pledge_balance' => null,
        'total_received_giving' => null,
        'total_received_matching_gifts' => null,
        'total_soft_credits' => null,
        'total_years_given' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'consecutive_years_given' => 'consecutive_years_given',
        'constituent_id' => 'constituent_id',
        'total_committed_matching_gifts' => 'total_committed_matching_gifts',
        'total_giving' => 'total_giving',
        'total_pledge_balance' => 'total_pledge_balance',
        'total_received_giving' => 'total_received_giving',
        'total_received_matching_gifts' => 'total_received_matching_gifts',
        'total_soft_credits' => 'total_soft_credits',
        'total_years_given' => 'total_years_given'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'consecutive_years_given' => 'setConsecutiveYearsGiven',
        'constituent_id' => 'setConstituentId',
        'total_committed_matching_gifts' => 'setTotalCommittedMatchingGifts',
        'total_giving' => 'setTotalGiving',
        'total_pledge_balance' => 'setTotalPledgeBalance',
        'total_received_giving' => 'setTotalReceivedGiving',
        'total_received_matching_gifts' => 'setTotalReceivedMatchingGifts',
        'total_soft_credits' => 'setTotalSoftCredits',
        'total_years_given' => 'setTotalYearsGiven'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'consecutive_years_given' => 'getConsecutiveYearsGiven',
        'constituent_id' => 'getConstituentId',
        'total_committed_matching_gifts' => 'getTotalCommittedMatchingGifts',
        'total_giving' => 'getTotalGiving',
        'total_pledge_balance' => 'getTotalPledgeBalance',
        'total_received_giving' => 'getTotalReceivedGiving',
        'total_received_matching_gifts' => 'getTotalReceivedMatchingGifts',
        'total_soft_credits' => 'getTotalSoftCredits',
        'total_years_given' => 'getTotalYearsGiven'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['consecutive_years_given'] = $data['consecutive_years_given'] ?? null;
        $this->container['constituent_id'] = $data['constituent_id'] ?? null;
        $this->container['total_committed_matching_gifts'] = $data['total_committed_matching_gifts'] ?? null;
        $this->container['total_giving'] = $data['total_giving'] ?? null;
        $this->container['total_pledge_balance'] = $data['total_pledge_balance'] ?? null;
        $this->container['total_received_giving'] = $data['total_received_giving'] ?? null;
        $this->container['total_received_matching_gifts'] = $data['total_received_matching_gifts'] ?? null;
        $this->container['total_soft_credits'] = $data['total_soft_credits'] ?? null;
        $this->container['total_years_given'] = $data['total_years_given'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets consecutive_years_given
     *
     * @return int|null
     */
    public function getConsecutiveYearsGiven()
    {
        return $this->container['consecutive_years_given'];
    }

    /**
     * Sets consecutive_years_given
     *
     * @param int|null $consecutive_years_given This computed field calculates the number of consecutive years the constituent has given.
     *
     * @return self
     */
    public function setConsecutiveYearsGiven($consecutive_years_given)
    {
        $this->container['consecutive_years_given'] = $consecutive_years_given;

        return $this;
    }

    /**
     * Gets constituent_id
     *
     * @return string|null
     */
    public function getConstituentId()
    {
        return $this->container['constituent_id'];
    }

    /**
     * Sets constituent_id
     *
     * @param string|null $constituent_id The immutable system record ID of the constituent associated with the lifetime giving.
     *
     * @return self
     */
    public function setConstituentId($constituent_id)
    {
        $this->container['constituent_id'] = $constituent_id;

        return $this;
    }

    /**
     * Gets total_committed_matching_gifts
     *
     * @return \BurgerDigital\BlackbaudPhpSdk\Model\Currency|null
     */
    public function getTotalCommittedMatchingGifts()
    {
        return $this->container['total_committed_matching_gifts'];
    }

    /**
     * Sets total_committed_matching_gifts
     *
     * @param \BurgerDigital\BlackbaudPhpSdk\Model\Currency|null $total_committed_matching_gifts total_committed_matching_gifts
     *
     * @return self
     */
    public function setTotalCommittedMatchingGifts($total_committed_matching_gifts)
    {
        $this->container['total_committed_matching_gifts'] = $total_committed_matching_gifts;

        return $this;
    }

    /**
     * Gets total_giving
     *
     * @return \BurgerDigital\BlackbaudPhpSdk\Model\Currency|null
     */
    public function getTotalGiving()
    {
        return $this->container['total_giving'];
    }

    /**
     * Sets total_giving
     *
     * @param \BurgerDigital\BlackbaudPhpSdk\Model\Currency|null $total_giving total_giving
     *
     * @return self
     */
    public function setTotalGiving($total_giving)
    {
        $this->container['total_giving'] = $total_giving;

        return $this;
    }

    /**
     * Gets total_pledge_balance
     *
     * @return \BurgerDigital\BlackbaudPhpSdk\Model\Currency|null
     */
    public function getTotalPledgeBalance()
    {
        return $this->container['total_pledge_balance'];
    }

    /**
     * Sets total_pledge_balance
     *
     * @param \BurgerDigital\BlackbaudPhpSdk\Model\Currency|null $total_pledge_balance total_pledge_balance
     *
     * @return self
     */
    public function setTotalPledgeBalance($total_pledge_balance)
    {
        $this->container['total_pledge_balance'] = $total_pledge_balance;

        return $this;
    }

    /**
     * Gets total_received_giving
     *
     * @return \BurgerDigital\BlackbaudPhpSdk\Model\Currency|null
     */
    public function getTotalReceivedGiving()
    {
        return $this->container['total_received_giving'];
    }

    /**
     * Sets total_received_giving
     *
     * @param \BurgerDigital\BlackbaudPhpSdk\Model\Currency|null $total_received_giving total_received_giving
     *
     * @return self
     */
    public function setTotalReceivedGiving($total_received_giving)
    {
        $this->container['total_received_giving'] = $total_received_giving;

        return $this;
    }

    /**
     * Gets total_received_matching_gifts
     *
     * @return \BurgerDigital\BlackbaudPhpSdk\Model\Currency|null
     */
    public function getTotalReceivedMatchingGifts()
    {
        return $this->container['total_received_matching_gifts'];
    }

    /**
     * Sets total_received_matching_gifts
     *
     * @param \BurgerDigital\BlackbaudPhpSdk\Model\Currency|null $total_received_matching_gifts total_received_matching_gifts
     *
     * @return self
     */
    public function setTotalReceivedMatchingGifts($total_received_matching_gifts)
    {
        $this->container['total_received_matching_gifts'] = $total_received_matching_gifts;

        return $this;
    }

    /**
     * Gets total_soft_credits
     *
     * @return \BurgerDigital\BlackbaudPhpSdk\Model\Currency|null
     */
    public function getTotalSoftCredits()
    {
        return $this->container['total_soft_credits'];
    }

    /**
     * Sets total_soft_credits
     *
     * @param \BurgerDigital\BlackbaudPhpSdk\Model\Currency|null $total_soft_credits total_soft_credits
     *
     * @return self
     */
    public function setTotalSoftCredits($total_soft_credits)
    {
        $this->container['total_soft_credits'] = $total_soft_credits;

        return $this;
    }

    /**
     * Gets total_years_given
     *
     * @return int|null
     */
    public function getTotalYearsGiven()
    {
        return $this->container['total_years_given'];
    }

    /**
     * Sets total_years_given
     *
     * @param int|null $total_years_given This computed field calculates the total number of years the constituent has given.
     *
     * @return self
     */
    public function setTotalYearsGiven($total_years_given)
    {
        $this->container['total_years_given'] = $total_years_given;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


