<?php
/**
 * ActionEdit
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  BurgerDigital\BlackbaudPhpSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Constituent
 *
 * This API manages constituent information and related entities such as addresses, phones, emails, and notes.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BurgerDigital\BlackbaudPhpSdk\Model;

use \ArrayAccess;
use \BurgerDigital\BlackbaudPhpSdk\ObjectSerializer;

/**
 * ActionEdit Class Doc Comment
 *
 * @category Class
 * @description Actions track the interactions and tasks that are required to secure gifts and cultivate relationships with constituents.
 * @package  BurgerDigital\BlackbaudPhpSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ActionEdit implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ActionEdit';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'category' => 'string',
        'completed' => 'bool',
        'completed_date' => '\DateTime',
        'date' => '\DateTime',
        'description' => 'string',
        'direction' => 'string',
        'end_time' => 'string',
        'fundraisers' => 'string[]',
        'location' => 'string',
        'opportunity_id' => 'string',
        'outcome' => 'string',
        'priority' => 'string',
        'start_time' => 'string',
        'status' => 'string',
        'summary' => 'string',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'category' => null,
        'completed' => null,
        'completed_date' => 'date-time',
        'date' => 'date-time',
        'description' => null,
        'direction' => null,
        'end_time' => null,
        'fundraisers' => null,
        'location' => null,
        'opportunity_id' => null,
        'outcome' => null,
        'priority' => null,
        'start_time' => null,
        'status' => null,
        'summary' => null,
        'type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'category' => 'category',
        'completed' => 'completed',
        'completed_date' => 'completed_date',
        'date' => 'date',
        'description' => 'description',
        'direction' => 'direction',
        'end_time' => 'end_time',
        'fundraisers' => 'fundraisers',
        'location' => 'location',
        'opportunity_id' => 'opportunity_id',
        'outcome' => 'outcome',
        'priority' => 'priority',
        'start_time' => 'start_time',
        'status' => 'status',
        'summary' => 'summary',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'category' => 'setCategory',
        'completed' => 'setCompleted',
        'completed_date' => 'setCompletedDate',
        'date' => 'setDate',
        'description' => 'setDescription',
        'direction' => 'setDirection',
        'end_time' => 'setEndTime',
        'fundraisers' => 'setFundraisers',
        'location' => 'setLocation',
        'opportunity_id' => 'setOpportunityId',
        'outcome' => 'setOutcome',
        'priority' => 'setPriority',
        'start_time' => 'setStartTime',
        'status' => 'setStatus',
        'summary' => 'setSummary',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'category' => 'getCategory',
        'completed' => 'getCompleted',
        'completed_date' => 'getCompletedDate',
        'date' => 'getDate',
        'description' => 'getDescription',
        'direction' => 'getDirection',
        'end_time' => 'getEndTime',
        'fundraisers' => 'getFundraisers',
        'location' => 'getLocation',
        'opportunity_id' => 'getOpportunityId',
        'outcome' => 'getOutcome',
        'priority' => 'getPriority',
        'start_time' => 'getStartTime',
        'status' => 'getStatus',
        'summary' => 'getSummary',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const DIRECTION_INBOUND = 'Inbound';
    const DIRECTION_OUTBOUND = 'Outbound';
    const OUTCOME_SUCCESSFUL = 'Successful';
    const OUTCOME_UNSUCCESSFUL = 'Unsuccessful';
    const PRIORITY_NORMAL = 'Normal';
    const PRIORITY_HIGH = 'High';
    const PRIORITY_LOW = 'Low';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDirectionAllowableValues()
    {
        return [
            self::DIRECTION_INBOUND,
            self::DIRECTION_OUTBOUND,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOutcomeAllowableValues()
    {
        return [
            self::OUTCOME_SUCCESSFUL,
            self::OUTCOME_UNSUCCESSFUL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPriorityAllowableValues()
    {
        return [
            self::PRIORITY_NORMAL,
            self::PRIORITY_HIGH,
            self::PRIORITY_LOW,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['category'] = $data['category'] ?? null;
        $this->container['completed'] = $data['completed'] ?? null;
        $this->container['completed_date'] = $data['completed_date'] ?? null;
        $this->container['date'] = $data['date'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['direction'] = $data['direction'] ?? null;
        $this->container['end_time'] = $data['end_time'] ?? null;
        $this->container['fundraisers'] = $data['fundraisers'] ?? null;
        $this->container['location'] = $data['location'] ?? null;
        $this->container['opportunity_id'] = $data['opportunity_id'] ?? null;
        $this->container['outcome'] = $data['outcome'] ?? null;
        $this->container['priority'] = $data['priority'] ?? null;
        $this->container['start_time'] = $data['start_time'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['summary'] = $data['summary'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDirectionAllowableValues();
        if (!is_null($this->container['direction']) && !in_array($this->container['direction'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'direction', must be one of '%s'",
                $this->container['direction'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOutcomeAllowableValues();
        if (!is_null($this->container['outcome']) && !in_array($this->container['outcome'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'outcome', must be one of '%s'",
                $this->container['outcome'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPriorityAllowableValues();
        if (!is_null($this->container['priority']) && !in_array($this->container['priority'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'priority', must be one of '%s'",
                $this->container['priority'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['summary']) && (mb_strlen($this->container['summary']) > 255)) {
            $invalidProperties[] = "invalid value for 'summary', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['summary']) && (mb_strlen($this->container['summary']) < 0)) {
            $invalidProperties[] = "invalid value for 'summary', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets category
     *
     * @return string|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string|null $category The channel or intent of the constituent interaction. Available values are <i>Phone Call</i>, <i>Meeting</i>, <i>Mailing</i>, <i>Email</i>, and <i>Task/Other</i>. This property cannot be set to null.
     *
     * @return self
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets completed
     *
     * @return bool|null
     */
    public function getCompleted()
    {
        return $this->container['completed'];
    }

    /**
     * Sets completed
     *
     * @param bool|null $completed Indicates whether the action is complete. If the system is configured to use custom action statuses, this value is based on the action status value. This property defaults to <i>false</i> if no value is provided.
     *
     * @return self
     */
    public function setCompleted($completed)
    {
        $this->container['completed'] = $completed;

        return $this;
    }

    /**
     * Gets completed_date
     *
     * @return \DateTime|null
     */
    public function getCompletedDate()
    {
        return $this->container['completed_date'];
    }

    /**
     * Sets completed_date
     *
     * @param \DateTime|null $completed_date The date when the action was completed. Uses <a href=\"https://tools.ietf.org/html/rfc3339\">ISO-8601 format: </a><i>1969-11-21T10:29:43</i>.
     *
     * @return self
     */
    public function setCompletedDate($completed_date)
    {
        $this->container['completed_date'] = $completed_date;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime|null
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime|null $date The action date. Uses <a href=\"https://tools.ietf.org/html/rfc3339\">ISO-8601 format: </a><i>1969-11-21T10:29:43</i>. This property cannot be set to null.
     *
     * @return self
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The detailed explanation that elaborates on the action summary.
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets direction
     *
     * @return string|null
     */
    public function getDirection()
    {
        return $this->container['direction'];
    }

    /**
     * Sets direction
     *
     * @param string|null $direction The direction of the action. Available values are <i>Inbound</i> and <i>Outbound</i>.
     *
     * @return self
     */
    public function setDirection($direction)
    {
        $allowedValues = $this->getDirectionAllowableValues();
        if (!is_null($direction) && !in_array($direction, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'direction', must be one of '%s'",
                    $direction,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['direction'] = $direction;

        return $this;
    }

    /**
     * Gets end_time
     *
     * @return string|null
     */
    public function getEndTime()
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     *
     * @param string|null $end_time The end time of the action. Uses 24-hour time in the <i>HH:mm</i> format. For example, 17:30 represents 5:30 p.m.
     *
     * @return self
     */
    public function setEndTime($end_time)
    {
        $this->container['end_time'] = $end_time;

        return $this;
    }

    /**
     * Gets fundraisers
     *
     * @return string[]|null
     */
    public function getFundraisers()
    {
        return $this->container['fundraisers'];
    }

    /**
     * Sets fundraisers
     *
     * @param string[]|null $fundraisers The set of immutable constituent system record IDs for the fundraisers associated with the action.
     *
     * @return self
     */
    public function setFundraisers($fundraisers)
    {
        $this->container['fundraisers'] = $fundraisers;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string|null $location The location of the action. Available values are the entries in the <a href=\"https://developer.sky.blackbaud.com/docs/services/56b76470069a0509c8f1c5b3/operations/ListActionLocations\"><b>Action Locations</b></a> table.
     *
     * @return self
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets opportunity_id
     *
     * @return string|null
     */
    public function getOpportunityId()
    {
        return $this->container['opportunity_id'];
    }

    /**
     * Sets opportunity_id
     *
     * @param string|null $opportunity_id The immutable system record ID of the opportunity associated with the action.
     *
     * @return self
     */
    public function setOpportunityId($opportunity_id)
    {
        $this->container['opportunity_id'] = $opportunity_id;

        return $this;
    }

    /**
     * Gets outcome
     *
     * @return string|null
     */
    public function getOutcome()
    {
        return $this->container['outcome'];
    }

    /**
     * Sets outcome
     *
     * @param string|null $outcome The outcome of the action. Available values are <i>Successful</i> and <i>Unsuccessful</i>.
     *
     * @return self
     */
    public function setOutcome($outcome)
    {
        $allowedValues = $this->getOutcomeAllowableValues();
        if (!is_null($outcome) && !in_array($outcome, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'outcome', must be one of '%s'",
                    $outcome,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['outcome'] = $outcome;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return string|null
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param string|null $priority The priority of the action. Available values are <i>Normal</i>, <i>High</i>, and <i>Low</i>. The default is <i>Normal</i>.
     *
     * @return self
     */
    public function setPriority($priority)
    {
        $allowedValues = $this->getPriorityAllowableValues();
        if (!is_null($priority) && !in_array($priority, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'priority', must be one of '%s'",
                    $priority,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return string|null
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param string|null $start_time The start time of the action. Uses 24-hour time in the <i>HH:mm</i> format. For example, 17:30 represents 5:30 p.m.
     *
     * @return self
     */
    public function setStartTime($start_time)
    {
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status The action status. If the system is configured to use custom action statuses, available values are the entries in the <a href=\"https://developer.sky.blackbaud.com/docs/services/56b76470069a0509c8f1c5b3/operations/ListActionStatusTypes\"><b>Action Status</b></a> table. If not, this field computes the status based on the <code>completed</code> and <code>date</code> properties: If an action is not completed and has a current or future date, the status is Open; if an action is not completed and has a past date, the status is Past due; and if an action is completed, the status is Completed.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets summary
     *
     * @return string|null
     */
    public function getSummary()
    {
        return $this->container['summary'];
    }

    /**
     * Sets summary
     *
     * @param string|null $summary The short description of the action that appears at the top of the record. Character limit: 255.
     *
     * @return self
     */
    public function setSummary($summary)
    {
        if (!is_null($summary) && (mb_strlen($summary) > 255)) {
            throw new \InvalidArgumentException('invalid length for $summary when calling ActionEdit., must be smaller than or equal to 255.');
        }
        if (!is_null($summary) && (mb_strlen($summary) < 0)) {
            throw new \InvalidArgumentException('invalid length for $summary when calling ActionEdit., must be bigger than or equal to 0.');
        }

        $this->container['summary'] = $summary;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Additional description of the action to complement the category. Available values are the entries in the <a href=\"https://developer.sky.blackbaud.com/docs/services/56b76470069a0509c8f1c5b3/operations/ListActionTypes\"><b>Actions</b></a> table.
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


