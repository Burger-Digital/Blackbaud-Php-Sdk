<?php
/**
 * ConstituentEdit
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  BurgerDigital\BlackbaudPhpSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Constituent
 *
 * This API manages constituent information and related entities such as addresses, phones, emails, and notes.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BurgerDigital\BlackbaudPhpSdk\Model;

use \ArrayAccess;
use \BurgerDigital\BlackbaudPhpSdk\ObjectSerializer;

/**
 * ConstituentEdit Class Doc Comment
 *
 * @category Class
 * @description Constituents are the individuals and organizations who support your organization by contributing time, money, and resources. The constituent entity stores information about donors, prospects, volunteers, general supporters, and more.
 * @package  BurgerDigital\BlackbaudPhpSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ConstituentEdit implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ConstituentEdit';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'birthdate' => '\BurgerDigital\BlackbaudPhpSdk\Model\FuzzyDate',
        'deceased' => 'bool',
        'deceased_date' => '\BurgerDigital\BlackbaudPhpSdk\Model\FuzzyDate',
        'first' => 'string',
        'former_name' => 'string',
        'gender' => 'string',
        'gives_anonymously' => 'bool',
        'inactive' => 'bool',
        'last' => 'string',
        'lookup_id' => 'string',
        'marital_status' => 'string',
        'middle' => 'string',
        'name' => 'string',
        'preferred_name' => 'string',
        'suffix' => 'string',
        'suffix_2' => 'string',
        'title' => 'string',
        'title_2' => 'string',
        'birthplace' => 'string',
        'ethnicity' => 'string',
        'income' => 'string',
        'religion' => 'string',
        'industry' => 'string',
        'matches_gifts' => 'bool',
        'matching_gift_per_gift_min' => '\BurgerDigital\BlackbaudPhpSdk\Model\Currency',
        'matching_gift_per_gift_max' => '\BurgerDigital\BlackbaudPhpSdk\Model\Currency',
        'matching_gift_total_min' => '\BurgerDigital\BlackbaudPhpSdk\Model\Currency',
        'matching_gift_total_max' => '\BurgerDigital\BlackbaudPhpSdk\Model\Currency',
        'matching_gift_factor' => 'double',
        'matching_gift_notes' => 'string',
        'num_employees' => 'int',
        'is_memorial' => 'bool',
        'is_solicitor' => 'bool',
        'no_valid_address' => 'bool',
        'receipt_type' => 'string',
        'target' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'birthdate' => null,
        'deceased' => null,
        'deceased_date' => null,
        'first' => null,
        'former_name' => null,
        'gender' => null,
        'gives_anonymously' => null,
        'inactive' => null,
        'last' => null,
        'lookup_id' => null,
        'marital_status' => null,
        'middle' => null,
        'name' => null,
        'preferred_name' => null,
        'suffix' => null,
        'suffix_2' => null,
        'title' => null,
        'title_2' => null,
        'birthplace' => null,
        'ethnicity' => null,
        'income' => null,
        'religion' => null,
        'industry' => null,
        'matches_gifts' => null,
        'matching_gift_per_gift_min' => null,
        'matching_gift_per_gift_max' => null,
        'matching_gift_total_min' => null,
        'matching_gift_total_max' => null,
        'matching_gift_factor' => 'double',
        'matching_gift_notes' => null,
        'num_employees' => 'int32',
        'is_memorial' => null,
        'is_solicitor' => null,
        'no_valid_address' => null,
        'receipt_type' => null,
        'target' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'birthdate' => 'birthdate',
        'deceased' => 'deceased',
        'deceased_date' => 'deceased_date',
        'first' => 'first',
        'former_name' => 'former_name',
        'gender' => 'gender',
        'gives_anonymously' => 'gives_anonymously',
        'inactive' => 'inactive',
        'last' => 'last',
        'lookup_id' => 'lookup_id',
        'marital_status' => 'marital_status',
        'middle' => 'middle',
        'name' => 'name',
        'preferred_name' => 'preferred_name',
        'suffix' => 'suffix',
        'suffix_2' => 'suffix_2',
        'title' => 'title',
        'title_2' => 'title_2',
        'birthplace' => 'birthplace',
        'ethnicity' => 'ethnicity',
        'income' => 'income',
        'religion' => 'religion',
        'industry' => 'industry',
        'matches_gifts' => 'matches_gifts',
        'matching_gift_per_gift_min' => 'matching_gift_per_gift_min',
        'matching_gift_per_gift_max' => 'matching_gift_per_gift_max',
        'matching_gift_total_min' => 'matching_gift_total_min',
        'matching_gift_total_max' => 'matching_gift_total_max',
        'matching_gift_factor' => 'matching_gift_factor',
        'matching_gift_notes' => 'matching_gift_notes',
        'num_employees' => 'num_employees',
        'is_memorial' => 'is_memorial',
        'is_solicitor' => 'is_solicitor',
        'no_valid_address' => 'no_valid_address',
        'receipt_type' => 'receipt_type',
        'target' => 'target'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'birthdate' => 'setBirthdate',
        'deceased' => 'setDeceased',
        'deceased_date' => 'setDeceasedDate',
        'first' => 'setFirst',
        'former_name' => 'setFormerName',
        'gender' => 'setGender',
        'gives_anonymously' => 'setGivesAnonymously',
        'inactive' => 'setInactive',
        'last' => 'setLast',
        'lookup_id' => 'setLookupId',
        'marital_status' => 'setMaritalStatus',
        'middle' => 'setMiddle',
        'name' => 'setName',
        'preferred_name' => 'setPreferredName',
        'suffix' => 'setSuffix',
        'suffix_2' => 'setSuffix2',
        'title' => 'setTitle',
        'title_2' => 'setTitle2',
        'birthplace' => 'setBirthplace',
        'ethnicity' => 'setEthnicity',
        'income' => 'setIncome',
        'religion' => 'setReligion',
        'industry' => 'setIndustry',
        'matches_gifts' => 'setMatchesGifts',
        'matching_gift_per_gift_min' => 'setMatchingGiftPerGiftMin',
        'matching_gift_per_gift_max' => 'setMatchingGiftPerGiftMax',
        'matching_gift_total_min' => 'setMatchingGiftTotalMin',
        'matching_gift_total_max' => 'setMatchingGiftTotalMax',
        'matching_gift_factor' => 'setMatchingGiftFactor',
        'matching_gift_notes' => 'setMatchingGiftNotes',
        'num_employees' => 'setNumEmployees',
        'is_memorial' => 'setIsMemorial',
        'is_solicitor' => 'setIsSolicitor',
        'no_valid_address' => 'setNoValidAddress',
        'receipt_type' => 'setReceiptType',
        'target' => 'setTarget'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'birthdate' => 'getBirthdate',
        'deceased' => 'getDeceased',
        'deceased_date' => 'getDeceasedDate',
        'first' => 'getFirst',
        'former_name' => 'getFormerName',
        'gender' => 'getGender',
        'gives_anonymously' => 'getGivesAnonymously',
        'inactive' => 'getInactive',
        'last' => 'getLast',
        'lookup_id' => 'getLookupId',
        'marital_status' => 'getMaritalStatus',
        'middle' => 'getMiddle',
        'name' => 'getName',
        'preferred_name' => 'getPreferredName',
        'suffix' => 'getSuffix',
        'suffix_2' => 'getSuffix2',
        'title' => 'getTitle',
        'title_2' => 'getTitle2',
        'birthplace' => 'getBirthplace',
        'ethnicity' => 'getEthnicity',
        'income' => 'getIncome',
        'religion' => 'getReligion',
        'industry' => 'getIndustry',
        'matches_gifts' => 'getMatchesGifts',
        'matching_gift_per_gift_min' => 'getMatchingGiftPerGiftMin',
        'matching_gift_per_gift_max' => 'getMatchingGiftPerGiftMax',
        'matching_gift_total_min' => 'getMatchingGiftTotalMin',
        'matching_gift_total_max' => 'getMatchingGiftTotalMax',
        'matching_gift_factor' => 'getMatchingGiftFactor',
        'matching_gift_notes' => 'getMatchingGiftNotes',
        'num_employees' => 'getNumEmployees',
        'is_memorial' => 'getIsMemorial',
        'is_solicitor' => 'getIsSolicitor',
        'no_valid_address' => 'getNoValidAddress',
        'receipt_type' => 'getReceiptType',
        'target' => 'getTarget'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const RECEIPT_TYPE_ONE_RECEIPT_PER_GIFT = 'One receipt per gift';
    const RECEIPT_TYPE_CONSOLIDATED_RECEIPTS = 'Consolidated receipts';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReceiptTypeAllowableValues()
    {
        return [
            self::RECEIPT_TYPE_ONE_RECEIPT_PER_GIFT,
            self::RECEIPT_TYPE_CONSOLIDATED_RECEIPTS,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['birthdate'] = $data['birthdate'] ?? null;
        $this->container['deceased'] = $data['deceased'] ?? null;
        $this->container['deceased_date'] = $data['deceased_date'] ?? null;
        $this->container['first'] = $data['first'] ?? null;
        $this->container['former_name'] = $data['former_name'] ?? null;
        $this->container['gender'] = $data['gender'] ?? null;
        $this->container['gives_anonymously'] = $data['gives_anonymously'] ?? null;
        $this->container['inactive'] = $data['inactive'] ?? null;
        $this->container['last'] = $data['last'] ?? null;
        $this->container['lookup_id'] = $data['lookup_id'] ?? null;
        $this->container['marital_status'] = $data['marital_status'] ?? null;
        $this->container['middle'] = $data['middle'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['preferred_name'] = $data['preferred_name'] ?? null;
        $this->container['suffix'] = $data['suffix'] ?? null;
        $this->container['suffix_2'] = $data['suffix_2'] ?? null;
        $this->container['title'] = $data['title'] ?? null;
        $this->container['title_2'] = $data['title_2'] ?? null;
        $this->container['birthplace'] = $data['birthplace'] ?? null;
        $this->container['ethnicity'] = $data['ethnicity'] ?? null;
        $this->container['income'] = $data['income'] ?? null;
        $this->container['religion'] = $data['religion'] ?? null;
        $this->container['industry'] = $data['industry'] ?? null;
        $this->container['matches_gifts'] = $data['matches_gifts'] ?? null;
        $this->container['matching_gift_per_gift_min'] = $data['matching_gift_per_gift_min'] ?? null;
        $this->container['matching_gift_per_gift_max'] = $data['matching_gift_per_gift_max'] ?? null;
        $this->container['matching_gift_total_min'] = $data['matching_gift_total_min'] ?? null;
        $this->container['matching_gift_total_max'] = $data['matching_gift_total_max'] ?? null;
        $this->container['matching_gift_factor'] = $data['matching_gift_factor'] ?? null;
        $this->container['matching_gift_notes'] = $data['matching_gift_notes'] ?? null;
        $this->container['num_employees'] = $data['num_employees'] ?? null;
        $this->container['is_memorial'] = $data['is_memorial'] ?? null;
        $this->container['is_solicitor'] = $data['is_solicitor'] ?? null;
        $this->container['no_valid_address'] = $data['no_valid_address'] ?? null;
        $this->container['receipt_type'] = $data['receipt_type'] ?? null;
        $this->container['target'] = $data['target'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['first']) && (mb_strlen($this->container['first']) > 50)) {
            $invalidProperties[] = "invalid value for 'first', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['first']) && (mb_strlen($this->container['first']) < 0)) {
            $invalidProperties[] = "invalid value for 'first', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['former_name']) && (mb_strlen($this->container['former_name']) > 100)) {
            $invalidProperties[] = "invalid value for 'former_name', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['former_name']) && (mb_strlen($this->container['former_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'former_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['last']) && (mb_strlen($this->container['last']) > 100)) {
            $invalidProperties[] = "invalid value for 'last', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['last']) && (mb_strlen($this->container['last']) < 0)) {
            $invalidProperties[] = "invalid value for 'last', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['middle']) && (mb_strlen($this->container['middle']) > 50)) {
            $invalidProperties[] = "invalid value for 'middle', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['middle']) && (mb_strlen($this->container['middle']) < 0)) {
            $invalidProperties[] = "invalid value for 'middle', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['preferred_name']) && (mb_strlen($this->container['preferred_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'preferred_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['preferred_name']) && (mb_strlen($this->container['preferred_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'preferred_name', the character length must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getReceiptTypeAllowableValues();
        if (!is_null($this->container['receipt_type']) && !in_array($this->container['receipt_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'receipt_type', must be one of '%s'",
                $this->container['receipt_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets birthdate
     *
     * @return \BurgerDigital\BlackbaudPhpSdk\Model\FuzzyDate|null
     */
    public function getBirthdate()
    {
        return $this->container['birthdate'];
    }

    /**
     * Sets birthdate
     *
     * @param \BurgerDigital\BlackbaudPhpSdk\Model\FuzzyDate|null $birthdate birthdate
     *
     * @return self
     */
    public function setBirthdate($birthdate)
    {
        $this->container['birthdate'] = $birthdate;

        return $this;
    }

    /**
     * Gets deceased
     *
     * @return bool|null
     */
    public function getDeceased()
    {
        return $this->container['deceased'];
    }

    /**
     * Sets deceased
     *
     * @param bool|null $deceased Indicates whether the constituent is deceased. For individuals only.
     *
     * @return self
     */
    public function setDeceased($deceased)
    {
        $this->container['deceased'] = $deceased;

        return $this;
    }

    /**
     * Gets deceased_date
     *
     * @return \BurgerDigital\BlackbaudPhpSdk\Model\FuzzyDate|null
     */
    public function getDeceasedDate()
    {
        return $this->container['deceased_date'];
    }

    /**
     * Sets deceased_date
     *
     * @param \BurgerDigital\BlackbaudPhpSdk\Model\FuzzyDate|null $deceased_date deceased_date
     *
     * @return self
     */
    public function setDeceasedDate($deceased_date)
    {
        $this->container['deceased_date'] = $deceased_date;

        return $this;
    }

    /**
     * Gets first
     *
     * @return string|null
     */
    public function getFirst()
    {
        return $this->container['first'];
    }

    /**
     * Sets first
     *
     * @param string|null $first The constituent's first name. For individuals only. Character limit: 50.
     *
     * @return self
     */
    public function setFirst($first)
    {
        if (!is_null($first) && (mb_strlen($first) > 50)) {
            throw new \InvalidArgumentException('invalid length for $first when calling ConstituentEdit., must be smaller than or equal to 50.');
        }
        if (!is_null($first) && (mb_strlen($first) < 0)) {
            throw new \InvalidArgumentException('invalid length for $first when calling ConstituentEdit., must be bigger than or equal to 0.');
        }

        $this->container['first'] = $first;

        return $this;
    }

    /**
     * Gets former_name
     *
     * @return string|null
     */
    public function getFormerName()
    {
        return $this->container['former_name'];
    }

    /**
     * Sets former_name
     *
     * @param string|null $former_name The constituent's former name. For individuals only. Character limit: 100.
     *
     * @return self
     */
    public function setFormerName($former_name)
    {
        if (!is_null($former_name) && (mb_strlen($former_name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $former_name when calling ConstituentEdit., must be smaller than or equal to 100.');
        }
        if (!is_null($former_name) && (mb_strlen($former_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $former_name when calling ConstituentEdit., must be bigger than or equal to 0.');
        }

        $this->container['former_name'] = $former_name;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string|null $gender The constituent's gender. Available values are the entries in the <a href=\"https://developer.sky.blackbaud.com/docs/services/56b76470069a0509c8f1c5b3/operations/ListGenders\"><b>Gender</b></a> table. This property defaults to <i>Unknown</i> if no value is provided. For individuals only.
     *
     * @return self
     */
    public function setGender($gender)
    {
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets gives_anonymously
     *
     * @return bool|null
     */
    public function getGivesAnonymously()
    {
        return $this->container['gives_anonymously'];
    }

    /**
     * Sets gives_anonymously
     *
     * @param bool|null $gives_anonymously Indicates whether the constituent gives anonymously.
     *
     * @return self
     */
    public function setGivesAnonymously($gives_anonymously)
    {
        $this->container['gives_anonymously'] = $gives_anonymously;

        return $this;
    }

    /**
     * Gets inactive
     *
     * @return bool|null
     */
    public function getInactive()
    {
        return $this->container['inactive'];
    }

    /**
     * Sets inactive
     *
     * @param bool|null $inactive Indicates whether the constituent is inactive.
     *
     * @return self
     */
    public function setInactive($inactive)
    {
        $this->container['inactive'] = $inactive;

        return $this;
    }

    /**
     * Gets last
     *
     * @return string|null
     */
    public function getLast()
    {
        return $this->container['last'];
    }

    /**
     * Sets last
     *
     * @param string|null $last The constituent's last name. For individuals only. Character limit: 100.
     *
     * @return self
     */
    public function setLast($last)
    {
        if (!is_null($last) && (mb_strlen($last) > 100)) {
            throw new \InvalidArgumentException('invalid length for $last when calling ConstituentEdit., must be smaller than or equal to 100.');
        }
        if (!is_null($last) && (mb_strlen($last) < 0)) {
            throw new \InvalidArgumentException('invalid length for $last when calling ConstituentEdit., must be bigger than or equal to 0.');
        }

        $this->container['last'] = $last;

        return $this;
    }

    /**
     * Gets lookup_id
     *
     * @return string|null
     */
    public function getLookupId()
    {
        return $this->container['lookup_id'];
    }

    /**
     * Sets lookup_id
     *
     * @param string|null $lookup_id The user-defined identifier for the constituent.
     *
     * @return self
     */
    public function setLookupId($lookup_id)
    {
        $this->container['lookup_id'] = $lookup_id;

        return $this;
    }

    /**
     * Gets marital_status
     *
     * @return string|null
     */
    public function getMaritalStatus()
    {
        return $this->container['marital_status'];
    }

    /**
     * Sets marital_status
     *
     * @param string|null $marital_status The constituent's marital status. Available values are the entries in the <a href=\"https://developer.sky.blackbaud.com/docs/services/56b76470069a0509c8f1c5b3/operations/ListMaritalStatuses\"><b>Marital Status</b></a> table.  For individuals only.
     *
     * @return self
     */
    public function setMaritalStatus($marital_status)
    {
        $this->container['marital_status'] = $marital_status;

        return $this;
    }

    /**
     * Gets middle
     *
     * @return string|null
     */
    public function getMiddle()
    {
        return $this->container['middle'];
    }

    /**
     * Sets middle
     *
     * @param string|null $middle The constituent's middle name. For individuals only. Character limit: 50.
     *
     * @return self
     */
    public function setMiddle($middle)
    {
        if (!is_null($middle) && (mb_strlen($middle) > 50)) {
            throw new \InvalidArgumentException('invalid length for $middle when calling ConstituentEdit., must be smaller than or equal to 50.');
        }
        if (!is_null($middle) && (mb_strlen($middle) < 0)) {
            throw new \InvalidArgumentException('invalid length for $middle when calling ConstituentEdit., must be bigger than or equal to 0.');
        }

        $this->container['middle'] = $middle;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name If the constituent's <code>type</code> is <i>Individual</i>, this is a computed field that does not apply to edit operations. If the <code>type</code> is <i>Organization</i>, this field cannot be changed to null and represents the organization's name. Character limit: 60.
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets preferred_name
     *
     * @return string|null
     */
    public function getPreferredName()
    {
        return $this->container['preferred_name'];
    }

    /**
     * Sets preferred_name
     *
     * @param string|null $preferred_name The constituent's preferred name. For individuals only. Character limit: 50.
     *
     * @return self
     */
    public function setPreferredName($preferred_name)
    {
        if (!is_null($preferred_name) && (mb_strlen($preferred_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $preferred_name when calling ConstituentEdit., must be smaller than or equal to 50.');
        }
        if (!is_null($preferred_name) && (mb_strlen($preferred_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $preferred_name when calling ConstituentEdit., must be bigger than or equal to 0.');
        }

        $this->container['preferred_name'] = $preferred_name;

        return $this;
    }

    /**
     * Gets suffix
     *
     * @return string|null
     */
    public function getSuffix()
    {
        return $this->container['suffix'];
    }

    /**
     * Sets suffix
     *
     * @param string|null $suffix The constituent's primary suffix. Available values are the entries in the <a href=\"https://developer.sky.blackbaud.com/docs/services/56b76470069a0509c8f1c5b3/operations/ListSuffixes\"><b>Suffixes</b></a> table. For individuals only.
     *
     * @return self
     */
    public function setSuffix($suffix)
    {
        $this->container['suffix'] = $suffix;

        return $this;
    }

    /**
     * Gets suffix_2
     *
     * @return string|null
     */
    public function getSuffix2()
    {
        return $this->container['suffix_2'];
    }

    /**
     * Sets suffix_2
     *
     * @param string|null $suffix_2 The constituent's secondary suffix. Available values are the entries in the <a href=\"https://developer.sky.blackbaud.com/docs/services/56b76470069a0509c8f1c5b3/operations/ListSuffixes\"><b>Suffixes</b></a> table. For individuals only.
     *
     * @return self
     */
    public function setSuffix2($suffix_2)
    {
        $this->container['suffix_2'] = $suffix_2;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title The constituent's primary title. Available values are the entries in the <a href=\"https://developer.sky.blackbaud.com/docs/services/56b76470069a0509c8f1c5b3/operations/ListTitles\"><b>Titles</b></a> table. For individuals only.
     *
     * @return self
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets title_2
     *
     * @return string|null
     */
    public function getTitle2()
    {
        return $this->container['title_2'];
    }

    /**
     * Sets title_2
     *
     * @param string|null $title_2 The constituent's secondary title. Available values are the entries in the <a href=\"https://developer.sky.blackbaud.com/docs/services/56b76470069a0509c8f1c5b3/operations/ListTitles\"><b>Titles</b></a> table. For individuals only.
     *
     * @return self
     */
    public function setTitle2($title_2)
    {
        $this->container['title_2'] = $title_2;

        return $this;
    }

    /**
     * Gets birthplace
     *
     * @return string|null
     */
    public function getBirthplace()
    {
        return $this->container['birthplace'];
    }

    /**
     * Sets birthplace
     *
     * @param string|null $birthplace The birthplace of the constituent. For individuals only.
     *
     * @return self
     */
    public function setBirthplace($birthplace)
    {
        $this->container['birthplace'] = $birthplace;

        return $this;
    }

    /**
     * Gets ethnicity
     *
     * @return string|null
     */
    public function getEthnicity()
    {
        return $this->container['ethnicity'];
    }

    /**
     * Sets ethnicity
     *
     * @param string|null $ethnicity The ethnicity of the constituent. For individuals only.
     *
     * @return self
     */
    public function setEthnicity($ethnicity)
    {
        $this->container['ethnicity'] = $ethnicity;

        return $this;
    }

    /**
     * Gets income
     *
     * @return string|null
     */
    public function getIncome()
    {
        return $this->container['income'];
    }

    /**
     * Sets income
     *
     * @param string|null $income The income for the constituent. For individuals only.
     *
     * @return self
     */
    public function setIncome($income)
    {
        $this->container['income'] = $income;

        return $this;
    }

    /**
     * Gets religion
     *
     * @return string|null
     */
    public function getReligion()
    {
        return $this->container['religion'];
    }

    /**
     * Sets religion
     *
     * @param string|null $religion The religion of the constituent. For individuals only.
     *
     * @return self
     */
    public function setReligion($religion)
    {
        $this->container['religion'] = $religion;

        return $this;
    }

    /**
     * Gets industry
     *
     * @return string|null
     */
    public function getIndustry()
    {
        return $this->container['industry'];
    }

    /**
     * Sets industry
     *
     * @param string|null $industry The industry of the constituent. For organizations only.
     *
     * @return self
     */
    public function setIndustry($industry)
    {
        $this->container['industry'] = $industry;

        return $this;
    }

    /**
     * Gets matches_gifts
     *
     * @return bool|null
     */
    public function getMatchesGifts()
    {
        return $this->container['matches_gifts'];
    }

    /**
     * Sets matches_gifts
     *
     * @param bool|null $matches_gifts Indicates if the constituent matches gifts. For organizations only.
     *
     * @return self
     */
    public function setMatchesGifts($matches_gifts)
    {
        $this->container['matches_gifts'] = $matches_gifts;

        return $this;
    }

    /**
     * Gets matching_gift_per_gift_min
     *
     * @return \BurgerDigital\BlackbaudPhpSdk\Model\Currency|null
     */
    public function getMatchingGiftPerGiftMin()
    {
        return $this->container['matching_gift_per_gift_min'];
    }

    /**
     * Sets matching_gift_per_gift_min
     *
     * @param \BurgerDigital\BlackbaudPhpSdk\Model\Currency|null $matching_gift_per_gift_min matching_gift_per_gift_min
     *
     * @return self
     */
    public function setMatchingGiftPerGiftMin($matching_gift_per_gift_min)
    {
        $this->container['matching_gift_per_gift_min'] = $matching_gift_per_gift_min;

        return $this;
    }

    /**
     * Gets matching_gift_per_gift_max
     *
     * @return \BurgerDigital\BlackbaudPhpSdk\Model\Currency|null
     */
    public function getMatchingGiftPerGiftMax()
    {
        return $this->container['matching_gift_per_gift_max'];
    }

    /**
     * Sets matching_gift_per_gift_max
     *
     * @param \BurgerDigital\BlackbaudPhpSdk\Model\Currency|null $matching_gift_per_gift_max matching_gift_per_gift_max
     *
     * @return self
     */
    public function setMatchingGiftPerGiftMax($matching_gift_per_gift_max)
    {
        $this->container['matching_gift_per_gift_max'] = $matching_gift_per_gift_max;

        return $this;
    }

    /**
     * Gets matching_gift_total_min
     *
     * @return \BurgerDigital\BlackbaudPhpSdk\Model\Currency|null
     */
    public function getMatchingGiftTotalMin()
    {
        return $this->container['matching_gift_total_min'];
    }

    /**
     * Sets matching_gift_total_min
     *
     * @param \BurgerDigital\BlackbaudPhpSdk\Model\Currency|null $matching_gift_total_min matching_gift_total_min
     *
     * @return self
     */
    public function setMatchingGiftTotalMin($matching_gift_total_min)
    {
        $this->container['matching_gift_total_min'] = $matching_gift_total_min;

        return $this;
    }

    /**
     * Gets matching_gift_total_max
     *
     * @return \BurgerDigital\BlackbaudPhpSdk\Model\Currency|null
     */
    public function getMatchingGiftTotalMax()
    {
        return $this->container['matching_gift_total_max'];
    }

    /**
     * Sets matching_gift_total_max
     *
     * @param \BurgerDigital\BlackbaudPhpSdk\Model\Currency|null $matching_gift_total_max matching_gift_total_max
     *
     * @return self
     */
    public function setMatchingGiftTotalMax($matching_gift_total_max)
    {
        $this->container['matching_gift_total_max'] = $matching_gift_total_max;

        return $this;
    }

    /**
     * Gets matching_gift_factor
     *
     * @return double|null
     */
    public function getMatchingGiftFactor()
    {
        return $this->container['matching_gift_factor'];
    }

    /**
     * Sets matching_gift_factor
     *
     * @param double|null $matching_gift_factor The matching gift factor for the constituent. For organizations only.
     *
     * @return self
     */
    public function setMatchingGiftFactor($matching_gift_factor)
    {
        $this->container['matching_gift_factor'] = $matching_gift_factor;

        return $this;
    }

    /**
     * Gets matching_gift_notes
     *
     * @return string|null
     */
    public function getMatchingGiftNotes()
    {
        return $this->container['matching_gift_notes'];
    }

    /**
     * Sets matching_gift_notes
     *
     * @param string|null $matching_gift_notes The matching gift notes for the constituent. For organizations only.
     *
     * @return self
     */
    public function setMatchingGiftNotes($matching_gift_notes)
    {
        $this->container['matching_gift_notes'] = $matching_gift_notes;

        return $this;
    }

    /**
     * Gets num_employees
     *
     * @return int|null
     */
    public function getNumEmployees()
    {
        return $this->container['num_employees'];
    }

    /**
     * Sets num_employees
     *
     * @param int|null $num_employees The number of employees for the constituent. For organizations only.
     *
     * @return self
     */
    public function setNumEmployees($num_employees)
    {
        $this->container['num_employees'] = $num_employees;

        return $this;
    }

    /**
     * Gets is_memorial
     *
     * @return bool|null
     */
    public function getIsMemorial()
    {
        return $this->container['is_memorial'];
    }

    /**
     * Sets is_memorial
     *
     * @param bool|null $is_memorial Indicates whether the constituent is for honor/memorial.
     *
     * @return self
     */
    public function setIsMemorial($is_memorial)
    {
        $this->container['is_memorial'] = $is_memorial;

        return $this;
    }

    /**
     * Gets is_solicitor
     *
     * @return bool|null
     */
    public function getIsSolicitor()
    {
        return $this->container['is_solicitor'];
    }

    /**
     * Sets is_solicitor
     *
     * @param bool|null $is_solicitor Indicates whether the constituent is a solicitor.
     *
     * @return self
     */
    public function setIsSolicitor($is_solicitor)
    {
        $this->container['is_solicitor'] = $is_solicitor;

        return $this;
    }

    /**
     * Gets no_valid_address
     *
     * @return bool|null
     */
    public function getNoValidAddress()
    {
        return $this->container['no_valid_address'];
    }

    /**
     * Sets no_valid_address
     *
     * @param bool|null $no_valid_address Indicates whether the constituent does not have a valid address.
     *
     * @return self
     */
    public function setNoValidAddress($no_valid_address)
    {
        $this->container['no_valid_address'] = $no_valid_address;

        return $this;
    }

    /**
     * Gets receipt_type
     *
     * @return string|null
     */
    public function getReceiptType()
    {
        return $this->container['receipt_type'];
    }

    /**
     * Sets receipt_type
     *
     * @param string|null $receipt_type The receipt type of the constituent.
     *
     * @return self
     */
    public function setReceiptType($receipt_type)
    {
        $allowedValues = $this->getReceiptTypeAllowableValues();
        if (!is_null($receipt_type) && !in_array($receipt_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'receipt_type', must be one of '%s'",
                    $receipt_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['receipt_type'] = $receipt_type;

        return $this;
    }

    /**
     * Gets target
     *
     * @return string|null
     */
    public function getTarget()
    {
        return $this->container['target'];
    }

    /**
     * Sets target
     *
     * @param string|null $target The target of the constituent.
     *
     * @return self
     */
    public function setTarget($target)
    {
        $this->container['target'] = $target;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


