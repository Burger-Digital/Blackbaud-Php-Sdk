<?php
/**
 * MembershipRead
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  BurgerDigital\BlackbaudPhpSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Constituent
 *
 * This API manages constituent information and related entities such as addresses, phones, emails, and notes.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BurgerDigital\BlackbaudPhpSdk\Model;

use \ArrayAccess;
use \BurgerDigital\BlackbaudPhpSdk\ObjectSerializer;

/**
 * MembershipRead Class Doc Comment
 *
 * @category Class
 * @description Membership programs encourage donor loyalty and reward constituents for their support with exclusive, personalized benefits. Memberships also encourage occasional donors to become regular givers through annual renewals.
 * @package  BurgerDigital\BlackbaudPhpSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class MembershipRead implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MembershipRead';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'category' => 'string',
        'constituent_id' => 'string',
        'date_added' => '\DateTime',
        'date_modified' => '\DateTime',
        'dues' => '\BurgerDigital\BlackbaudPhpSdk\Model\Currency',
        'expires' => '\DateTime',
        'joined' => '\DateTime',
        'members' => '\BurgerDigital\BlackbaudPhpSdk\Model\MembershipMemberRead[]',
        'program' => 'string',
        'standing' => 'string',
        'subcategory' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'category' => null,
        'constituent_id' => null,
        'date_added' => 'date-time',
        'date_modified' => 'date-time',
        'dues' => null,
        'expires' => 'date-time',
        'joined' => 'date-time',
        'members' => null,
        'program' => null,
        'standing' => null,
        'subcategory' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'category' => 'category',
        'constituent_id' => 'constituent_id',
        'date_added' => 'date_added',
        'date_modified' => 'date_modified',
        'dues' => 'dues',
        'expires' => 'expires',
        'joined' => 'joined',
        'members' => 'members',
        'program' => 'program',
        'standing' => 'standing',
        'subcategory' => 'subcategory'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'category' => 'setCategory',
        'constituent_id' => 'setConstituentId',
        'date_added' => 'setDateAdded',
        'date_modified' => 'setDateModified',
        'dues' => 'setDues',
        'expires' => 'setExpires',
        'joined' => 'setJoined',
        'members' => 'setMembers',
        'program' => 'setProgram',
        'standing' => 'setStanding',
        'subcategory' => 'setSubcategory'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'category' => 'getCategory',
        'constituent_id' => 'getConstituentId',
        'date_added' => 'getDateAdded',
        'date_modified' => 'getDateModified',
        'dues' => 'getDues',
        'expires' => 'getExpires',
        'joined' => 'getJoined',
        'members' => 'getMembers',
        'program' => 'getProgram',
        'standing' => 'getStanding',
        'subcategory' => 'getSubcategory'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STANDING__NEW = 'New';
    const STANDING_ACTIVE = 'Active';
    const STANDING_LAPSED = 'Lapsed';
    const STANDING_DROPPED = 'Dropped';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStandingAllowableValues()
    {
        return [
            self::STANDING__NEW,
            self::STANDING_ACTIVE,
            self::STANDING_LAPSED,
            self::STANDING_DROPPED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['category'] = $data['category'] ?? null;
        $this->container['constituent_id'] = $data['constituent_id'] ?? null;
        $this->container['date_added'] = $data['date_added'] ?? null;
        $this->container['date_modified'] = $data['date_modified'] ?? null;
        $this->container['dues'] = $data['dues'] ?? null;
        $this->container['expires'] = $data['expires'] ?? null;
        $this->container['joined'] = $data['joined'] ?? null;
        $this->container['members'] = $data['members'] ?? null;
        $this->container['program'] = $data['program'] ?? null;
        $this->container['standing'] = $data['standing'] ?? null;
        $this->container['subcategory'] = $data['subcategory'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStandingAllowableValues();
        if (!is_null($this->container['standing']) && !in_array($this->container['standing'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'standing', must be one of '%s'",
                $this->container['standing'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The immutable system record ID of the membership.
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string|null $category The membership category.
     *
     * @return self
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets constituent_id
     *
     * @return string|null
     */
    public function getConstituentId()
    {
        return $this->container['constituent_id'];
    }

    /**
     * Sets constituent_id
     *
     * @param string|null $constituent_id The immutable system record ID of the constituent associated with the membership.
     *
     * @return self
     */
    public function setConstituentId($constituent_id)
    {
        $this->container['constituent_id'] = $constituent_id;

        return $this;
    }

    /**
     * Gets date_added
     *
     * @return \DateTime|null
     */
    public function getDateAdded()
    {
        return $this->container['date_added'];
    }

    /**
     * Sets date_added
     *
     * @param \DateTime|null $date_added The date when the membership was created. Includes an offset from UTC in <a href=\"https://tools.ietf.org/html/rfc3339\">ISO-8601 format: </a><i>1969-11-21T10:29:43-04:00</i>.
     *
     * @return self
     */
    public function setDateAdded($date_added)
    {
        $this->container['date_added'] = $date_added;

        return $this;
    }

    /**
     * Gets date_modified
     *
     * @return \DateTime|null
     */
    public function getDateModified()
    {
        return $this->container['date_modified'];
    }

    /**
     * Sets date_modified
     *
     * @param \DateTime|null $date_modified The date when the membership was last modified. Includes an offset from UTC in <a href=\"https://tools.ietf.org/html/rfc3339\">ISO-8601 format: </a><i>1969-11-21T10:29:43-04:00</i>.
     *
     * @return self
     */
    public function setDateModified($date_modified)
    {
        $this->container['date_modified'] = $date_modified;

        return $this;
    }

    /**
     * Gets dues
     *
     * @return \BurgerDigital\BlackbaudPhpSdk\Model\Currency|null
     */
    public function getDues()
    {
        return $this->container['dues'];
    }

    /**
     * Sets dues
     *
     * @param \BurgerDigital\BlackbaudPhpSdk\Model\Currency|null $dues dues
     *
     * @return self
     */
    public function setDues($dues)
    {
        $this->container['dues'] = $dues;

        return $this;
    }

    /**
     * Gets expires
     *
     * @return \DateTime|null
     */
    public function getExpires()
    {
        return $this->container['expires'];
    }

    /**
     * Sets expires
     *
     * @param \DateTime|null $expires The date when the membership expires. Uses <a href=\"https://tools.ietf.org/html/rfc3339\">ISO-8601 format: </a><i>1969-11-21T10:29:43</i>.
     *
     * @return self
     */
    public function setExpires($expires)
    {
        $this->container['expires'] = $expires;

        return $this;
    }

    /**
     * Gets joined
     *
     * @return \DateTime|null
     */
    public function getJoined()
    {
        return $this->container['joined'];
    }

    /**
     * Sets joined
     *
     * @param \DateTime|null $joined The date when the membership becomes active. Uses <a href=\"https://tools.ietf.org/html/rfc3339\">ISO-8601 format: </a><i>1969-11-21T10:29:43</i>.
     *
     * @return self
     */
    public function setJoined($joined)
    {
        $this->container['joined'] = $joined;

        return $this;
    }

    /**
     * Gets members
     *
     * @return \BurgerDigital\BlackbaudPhpSdk\Model\MembershipMemberRead[]|null
     */
    public function getMembers()
    {
        return $this->container['members'];
    }

    /**
     * Sets members
     *
     * @param \BurgerDigital\BlackbaudPhpSdk\Model\MembershipMemberRead[]|null $members The set of members who belong to the membership.
     *
     * @return self
     */
    public function setMembers($members)
    {
        $this->container['members'] = $members;

        return $this;
    }

    /**
     * Gets program
     *
     * @return string|null
     */
    public function getProgram()
    {
        return $this->container['program'];
    }

    /**
     * Sets program
     *
     * @param string|null $program The membership program.
     *
     * @return self
     */
    public function setProgram($program)
    {
        $this->container['program'] = $program;

        return $this;
    }

    /**
     * Gets standing
     *
     * @return string|null
     */
    public function getStanding()
    {
        return $this->container['standing'];
    }

    /**
     * Sets standing
     *
     * @param string|null $standing The membership status. Available values are <i>New</i>, <i>Active</i>, <i>Lapsed</i>, and <i>Dropped</i>.
     *
     * @return self
     */
    public function setStanding($standing)
    {
        $allowedValues = $this->getStandingAllowableValues();
        if (!is_null($standing) && !in_array($standing, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'standing', must be one of '%s'",
                    $standing,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['standing'] = $standing;

        return $this;
    }

    /**
     * Gets subcategory
     *
     * @return string|null
     */
    public function getSubcategory()
    {
        return $this->container['subcategory'];
    }

    /**
     * Sets subcategory
     *
     * @param string|null $subcategory The membership subcategory.
     *
     * @return self
     */
    public function setSubcategory($subcategory)
    {
        $this->container['subcategory'] = $subcategory;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


