<?php
/**
 * PrimaryNameFormatEdit
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  BurgerDigital\BlackbaudPhpSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Constituent
 *
 * This API manages constituent information and related entities such as addresses, phones, emails, and notes.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BurgerDigital\BlackbaudPhpSdk\Model;

use \ArrayAccess;
use \BurgerDigital\BlackbaudPhpSdk\ObjectSerializer;

/**
 * PrimaryNameFormatEdit Class Doc Comment
 *
 * @category Class
 * @description Primary name formats are elevated name formats used for the constituent&#39;s most commonly used addressee and salutation name formats.
 * @package  BurgerDigital\BlackbaudPhpSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class PrimaryNameFormatEdit implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PrimaryNameFormatEdit';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'configuration_id' => 'string',
        'custom_format' => 'bool',
        'formatted_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'configuration_id' => null,
        'custom_format' => null,
        'formatted_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'configuration_id' => 'configuration_id',
        'custom_format' => 'custom_format',
        'formatted_name' => 'formatted_name'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'configuration_id' => 'setConfigurationId',
        'custom_format' => 'setCustomFormat',
        'formatted_name' => 'setFormattedName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'configuration_id' => 'getConfigurationId',
        'custom_format' => 'getCustomFormat',
        'formatted_name' => 'getFormattedName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['configuration_id'] = $data['configuration_id'] ?? null;
        $this->container['custom_format'] = $data['custom_format'] ?? null;
        $this->container['formatted_name'] = $data['formatted_name'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['formatted_name']) && (mb_strlen($this->container['formatted_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'formatted_name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['formatted_name']) && (mb_strlen($this->container['formatted_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'formatted_name', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets configuration_id
     *
     * @return string|null
     */
    public function getConfigurationId()
    {
        return $this->container['configuration_id'];
    }

    /**
     * Sets configuration_id
     *
     * @param string|null $configuration_id The name format configuration identifier. Required when custom_format is false.
     *
     * @return self
     */
    public function setConfigurationId($configuration_id)
    {
        $this->container['configuration_id'] = $configuration_id;

        return $this;
    }

    /**
     * Gets custom_format
     *
     * @return bool|null
     */
    public function getCustomFormat()
    {
        return $this->container['custom_format'];
    }

    /**
     * Sets custom_format
     *
     * @param bool|null $custom_format Whether the name format uses a custom format.
     *
     * @return self
     */
    public function setCustomFormat($custom_format)
    {
        $this->container['custom_format'] = $custom_format;

        return $this;
    }

    /**
     * Gets formatted_name
     *
     * @return string|null
     */
    public function getFormattedName()
    {
        return $this->container['formatted_name'];
    }

    /**
     * Sets formatted_name
     *
     * @param string|null $formatted_name The name format formatted name. Required when custom_format is true. Character limit: 255.
     *
     * @return self
     */
    public function setFormattedName($formatted_name)
    {
        if (!is_null($formatted_name) && (mb_strlen($formatted_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $formatted_name when calling PrimaryNameFormatEdit., must be smaller than or equal to 255.');
        }
        if (!is_null($formatted_name) && (mb_strlen($formatted_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $formatted_name when calling PrimaryNameFormatEdit., must be bigger than or equal to 0.');
        }

        $this->container['formatted_name'] = $formatted_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


