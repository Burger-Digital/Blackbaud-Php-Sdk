<?php
/**
 * AddressAdd
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  BurgerDigital\BlackbaudPhpSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Constituent
 *
 * This API manages constituent information and related entities such as addresses, phones, emails, and notes.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BurgerDigital\BlackbaudPhpSdk\Model;

use \ArrayAccess;
use \BurgerDigital\BlackbaudPhpSdk\ObjectSerializer;

/**
 * AddressAdd Class Doc Comment
 *
 * @category Class
 * @description Addresses store information about constituent residences and other addresses along with information about where or whether to send mail.
 * @package  BurgerDigital\BlackbaudPhpSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class AddressAdd implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AddressAdd';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'address_lines' => 'string',
        'city' => 'string',
        'constituent_id' => 'string',
        'country' => 'string',
        'county' => 'string',
        'do_not_mail' => 'bool',
        'end' => '\DateTime',
        'postal_code' => 'string',
        'preferred' => 'bool',
        'seasonal_end' => '\BurgerDigital\BlackbaudPhpSdk\Model\FuzzyDate',
        'seasonal_start' => '\BurgerDigital\BlackbaudPhpSdk\Model\FuzzyDate',
        'start' => '\DateTime',
        'state' => 'string',
        'suburb' => 'string',
        'type' => 'string',
        'information_source' => 'string',
        'lot' => 'string',
        'cart' => 'string',
        'dpc' => 'string',
        'region' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'address_lines' => null,
        'city' => null,
        'constituent_id' => null,
        'country' => null,
        'county' => null,
        'do_not_mail' => null,
        'end' => 'date-time',
        'postal_code' => null,
        'preferred' => null,
        'seasonal_end' => null,
        'seasonal_start' => null,
        'start' => 'date-time',
        'state' => null,
        'suburb' => null,
        'type' => null,
        'information_source' => null,
        'lot' => null,
        'cart' => null,
        'dpc' => null,
        'region' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address_lines' => 'address_lines',
        'city' => 'city',
        'constituent_id' => 'constituent_id',
        'country' => 'country',
        'county' => 'county',
        'do_not_mail' => 'do_not_mail',
        'end' => 'end',
        'postal_code' => 'postal_code',
        'preferred' => 'preferred',
        'seasonal_end' => 'seasonal_end',
        'seasonal_start' => 'seasonal_start',
        'start' => 'start',
        'state' => 'state',
        'suburb' => 'suburb',
        'type' => 'type',
        'information_source' => 'information_source',
        'lot' => 'lot',
        'cart' => 'cart',
        'dpc' => 'dpc',
        'region' => 'region'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address_lines' => 'setAddressLines',
        'city' => 'setCity',
        'constituent_id' => 'setConstituentId',
        'country' => 'setCountry',
        'county' => 'setCounty',
        'do_not_mail' => 'setDoNotMail',
        'end' => 'setEnd',
        'postal_code' => 'setPostalCode',
        'preferred' => 'setPreferred',
        'seasonal_end' => 'setSeasonalEnd',
        'seasonal_start' => 'setSeasonalStart',
        'start' => 'setStart',
        'state' => 'setState',
        'suburb' => 'setSuburb',
        'type' => 'setType',
        'information_source' => 'setInformationSource',
        'lot' => 'setLot',
        'cart' => 'setCart',
        'dpc' => 'setDpc',
        'region' => 'setRegion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address_lines' => 'getAddressLines',
        'city' => 'getCity',
        'constituent_id' => 'getConstituentId',
        'country' => 'getCountry',
        'county' => 'getCounty',
        'do_not_mail' => 'getDoNotMail',
        'end' => 'getEnd',
        'postal_code' => 'getPostalCode',
        'preferred' => 'getPreferred',
        'seasonal_end' => 'getSeasonalEnd',
        'seasonal_start' => 'getSeasonalStart',
        'start' => 'getStart',
        'state' => 'getState',
        'suburb' => 'getSuburb',
        'type' => 'getType',
        'information_source' => 'getInformationSource',
        'lot' => 'getLot',
        'cart' => 'getCart',
        'dpc' => 'getDpc',
        'region' => 'getRegion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['address_lines'] = $data['address_lines'] ?? null;
        $this->container['city'] = $data['city'] ?? null;
        $this->container['constituent_id'] = $data['constituent_id'] ?? null;
        $this->container['country'] = $data['country'] ?? null;
        $this->container['county'] = $data['county'] ?? null;
        $this->container['do_not_mail'] = $data['do_not_mail'] ?? null;
        $this->container['end'] = $data['end'] ?? null;
        $this->container['postal_code'] = $data['postal_code'] ?? null;
        $this->container['preferred'] = $data['preferred'] ?? null;
        $this->container['seasonal_end'] = $data['seasonal_end'] ?? null;
        $this->container['seasonal_start'] = $data['seasonal_start'] ?? null;
        $this->container['start'] = $data['start'] ?? null;
        $this->container['state'] = $data['state'] ?? null;
        $this->container['suburb'] = $data['suburb'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['information_source'] = $data['information_source'] ?? null;
        $this->container['lot'] = $data['lot'] ?? null;
        $this->container['cart'] = $data['cart'] ?? null;
        $this->container['dpc'] = $data['dpc'] ?? null;
        $this->container['region'] = $data['region'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['address_lines']) && (mb_strlen($this->container['address_lines']) > 150)) {
            $invalidProperties[] = "invalid value for 'address_lines', the character length must be smaller than or equal to 150.";
        }

        if (!is_null($this->container['address_lines']) && (mb_strlen($this->container['address_lines']) < 0)) {
            $invalidProperties[] = "invalid value for 'address_lines', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['city']) && (mb_strlen($this->container['city']) > 50)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['city']) && (mb_strlen($this->container['city']) < 0)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['constituent_id'] === null) {
            $invalidProperties[] = "'constituent_id' can't be null";
        }
        if (!is_null($this->container['postal_code']) && (mb_strlen($this->container['postal_code']) > 12)) {
            $invalidProperties[] = "invalid value for 'postal_code', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['postal_code']) && (mb_strlen($this->container['postal_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'postal_code', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if (!is_null($this->container['cart']) && (mb_strlen($this->container['cart']) > 20)) {
            $invalidProperties[] = "invalid value for 'cart', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['cart']) && (mb_strlen($this->container['cart']) < 0)) {
            $invalidProperties[] = "invalid value for 'cart', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['dpc']) && (mb_strlen($this->container['dpc']) > 8)) {
            $invalidProperties[] = "invalid value for 'dpc', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['dpc']) && (mb_strlen($this->container['dpc']) < 0)) {
            $invalidProperties[] = "invalid value for 'dpc', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address_lines
     *
     * @return string|null
     */
    public function getAddressLines()
    {
        return $this->container['address_lines'];
    }

    /**
     * Sets address_lines
     *
     * @param string|null $address_lines The address lines. Character limit: 150.
     *
     * @return self
     */
    public function setAddressLines($address_lines)
    {
        if (!is_null($address_lines) && (mb_strlen($address_lines) > 150)) {
            throw new \InvalidArgumentException('invalid length for $address_lines when calling AddressAdd., must be smaller than or equal to 150.');
        }
        if (!is_null($address_lines) && (mb_strlen($address_lines) < 0)) {
            throw new \InvalidArgumentException('invalid length for $address_lines when calling AddressAdd., must be bigger than or equal to 0.');
        }

        $this->container['address_lines'] = $address_lines;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city The city of the address.  Do not use in combination with the <code>suburb</code> property. Character limit: 50.
     *
     * @return self
     */
    public function setCity($city)
    {
        if (!is_null($city) && (mb_strlen($city) > 50)) {
            throw new \InvalidArgumentException('invalid length for $city when calling AddressAdd., must be smaller than or equal to 50.');
        }
        if (!is_null($city) && (mb_strlen($city) < 0)) {
            throw new \InvalidArgumentException('invalid length for $city when calling AddressAdd., must be bigger than or equal to 0.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets constituent_id
     *
     * @return string
     */
    public function getConstituentId()
    {
        return $this->container['constituent_id'];
    }

    /**
     * Sets constituent_id
     *
     * @param string $constituent_id The immutable system record ID of the constituent associated with the address.
     *
     * @return self
     */
    public function setConstituentId($constituent_id)
    {
        $this->container['constituent_id'] = $constituent_id;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country The country of the address, can be the country's ID, name, or abbreviation.
     *
     * @return self
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets county
     *
     * @return string|null
     */
    public function getCounty()
    {
        return $this->container['county'];
    }

    /**
     * Sets county
     *
     * @param string|null $county The county of the address.
     *
     * @return self
     */
    public function setCounty($county)
    {
        $this->container['county'] = $county;

        return $this;
    }

    /**
     * Gets do_not_mail
     *
     * @return bool|null
     */
    public function getDoNotMail()
    {
        return $this->container['do_not_mail'];
    }

    /**
     * Sets do_not_mail
     *
     * @param bool|null $do_not_mail Indicates whether the constituent requests not to be contacted at this address.
     *
     * @return self
     */
    public function setDoNotMail($do_not_mail)
    {
        $this->container['do_not_mail'] = $do_not_mail;

        return $this;
    }

    /**
     * Gets end
     *
     * @return \DateTime|null
     */
    public function getEnd()
    {
        return $this->container['end'];
    }

    /**
     * Sets end
     *
     * @param \DateTime|null $end The date when the constituent ceased to reside at this address. Uses <a href=\"https://tools.ietf.org/html/rfc3339\">ISO-8601 format: </a><i>1969-11-21T10:29:43</i>.
     *
     * @return self
     */
    public function setEnd($end)
    {
        $this->container['end'] = $end;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string|null
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string|null $postal_code The postal code of the address. Character limit: 12.
     *
     * @return self
     */
    public function setPostalCode($postal_code)
    {
        if (!is_null($postal_code) && (mb_strlen($postal_code) > 12)) {
            throw new \InvalidArgumentException('invalid length for $postal_code when calling AddressAdd., must be smaller than or equal to 12.');
        }
        if (!is_null($postal_code) && (mb_strlen($postal_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $postal_code when calling AddressAdd., must be bigger than or equal to 0.');
        }

        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets preferred
     *
     * @return bool|null
     */
    public function getPreferred()
    {
        return $this->container['preferred'];
    }

    /**
     * Sets preferred
     *
     * @param bool|null $preferred Indicates whether this is the constituent's preferred address.
     *
     * @return self
     */
    public function setPreferred($preferred)
    {
        $this->container['preferred'] = $preferred;

        return $this;
    }

    /**
     * Gets seasonal_end
     *
     * @return \BurgerDigital\BlackbaudPhpSdk\Model\FuzzyDate|null
     */
    public function getSeasonalEnd()
    {
        return $this->container['seasonal_end'];
    }

    /**
     * Sets seasonal_end
     *
     * @param \BurgerDigital\BlackbaudPhpSdk\Model\FuzzyDate|null $seasonal_end seasonal_end
     *
     * @return self
     */
    public function setSeasonalEnd($seasonal_end)
    {
        $this->container['seasonal_end'] = $seasonal_end;

        return $this;
    }

    /**
     * Gets seasonal_start
     *
     * @return \BurgerDigital\BlackbaudPhpSdk\Model\FuzzyDate|null
     */
    public function getSeasonalStart()
    {
        return $this->container['seasonal_start'];
    }

    /**
     * Sets seasonal_start
     *
     * @param \BurgerDigital\BlackbaudPhpSdk\Model\FuzzyDate|null $seasonal_start seasonal_start
     *
     * @return self
     */
    public function setSeasonalStart($seasonal_start)
    {
        $this->container['seasonal_start'] = $seasonal_start;

        return $this;
    }

    /**
     * Gets start
     *
     * @return \DateTime|null
     */
    public function getStart()
    {
        return $this->container['start'];
    }

    /**
     * Sets start
     *
     * @param \DateTime|null $start The date when the constituent began residing at this address. Uses <a href=\"https://tools.ietf.org/html/rfc3339\">ISO-8601 format: </a><i>1969-11-21T10:29:43</i>.
     *
     * @return self
     */
    public function setStart($start)
    {
        $this->container['start'] = $start;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state The state of the address.
     *
     * @return self
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets suburb
     *
     * @return string|null
     */
    public function getSuburb()
    {
        return $this->container['suburb'];
    }

    /**
     * Sets suburb
     *
     * @param string|null $suburb The suburb of the address. Do not use in combination with the <code>city</code> property.
     *
     * @return self
     */
    public function setSuburb($suburb)
    {
        $this->container['suburb'] = $suburb;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The address type. Available values are the entries in the <a href=\"https://developer.sky.blackbaud.com/docs/services/56b76470069a0509c8f1c5b3/operations/ListAddressTypes\"><b>Address Types</b></a> table.
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets information_source
     *
     * @return string|null
     */
    public function getInformationSource()
    {
        return $this->container['information_source'];
    }

    /**
     * Sets information_source
     *
     * @param string|null $information_source The information source for the address.
     *
     * @return self
     */
    public function setInformationSource($information_source)
    {
        $this->container['information_source'] = $information_source;

        return $this;
    }

    /**
     * Gets lot
     *
     * @return string|null
     */
    public function getLot()
    {
        return $this->container['lot'];
    }

    /**
     * Sets lot
     *
     * @param string|null $lot The Line of Travel (LOT) for the address.
     *
     * @return self
     */
    public function setLot($lot)
    {
        $this->container['lot'] = $lot;

        return $this;
    }

    /**
     * Gets cart
     *
     * @return string|null
     */
    public function getCart()
    {
        return $this->container['cart'];
    }

    /**
     * Sets cart
     *
     * @param string|null $cart The Carrier Route (CART) for the address.
     *
     * @return self
     */
    public function setCart($cart)
    {
        if (!is_null($cart) && (mb_strlen($cart) > 20)) {
            throw new \InvalidArgumentException('invalid length for $cart when calling AddressAdd., must be smaller than or equal to 20.');
        }
        if (!is_null($cart) && (mb_strlen($cart) < 0)) {
            throw new \InvalidArgumentException('invalid length for $cart when calling AddressAdd., must be bigger than or equal to 0.');
        }

        $this->container['cart'] = $cart;

        return $this;
    }

    /**
     * Gets dpc
     *
     * @return string|null
     */
    public function getDpc()
    {
        return $this->container['dpc'];
    }

    /**
     * Sets dpc
     *
     * @param string|null $dpc The Delivery Point Code (DPC) for the address.
     *
     * @return self
     */
    public function setDpc($dpc)
    {
        if (!is_null($dpc) && (mb_strlen($dpc) > 8)) {
            throw new \InvalidArgumentException('invalid length for $dpc when calling AddressAdd., must be smaller than or equal to 8.');
        }
        if (!is_null($dpc) && (mb_strlen($dpc) < 0)) {
            throw new \InvalidArgumentException('invalid length for $dpc when calling AddressAdd., must be bigger than or equal to 0.');
        }

        $this->container['dpc'] = $dpc;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string|null
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string|null $region The region for the address.
     *
     * @return self
     */
    public function setRegion($region)
    {
        $this->container['region'] = $region;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


