<?php
/**
 * OpportunityRead
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  BurgerDigital\BlackbaudPhpSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Opportunity
 *
 * This API manages opportunity information and related entities such as opportunity fundraisers, opportunity attachments, and opportunity custom fields.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BurgerDigital\BlackbaudPhpSdk\Model;

use \ArrayAccess;
use \BurgerDigital\BlackbaudPhpSdk\ObjectSerializer;

/**
 * OpportunityRead Class Doc Comment
 *
 * @category Class
 * @description Opportunities help you plan and track efforts to build relationships with prospects and secure major gifts. They can manage information about fundraising activities and the effectiveness of your efforts.
 * @package  BurgerDigital\BlackbaudPhpSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class OpportunityRead implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OpportunityRead';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'ask_amount' => '\BurgerDigital\BlackbaudPhpSdk\Model\Currency',
        'ask_date' => '\DateTime',
        'campaign_id' => 'string',
        'constituent_id' => 'string',
        'date_added' => '\DateTime',
        'date_modified' => '\DateTime',
        'deadline' => '\DateTime',
        'expected_amount' => '\BurgerDigital\BlackbaudPhpSdk\Model\Currency',
        'expected_date' => '\DateTime',
        'fund_id' => 'string',
        'funded_amount' => '\BurgerDigital\BlackbaudPhpSdk\Model\Currency',
        'funded_date' => '\DateTime',
        'fundraisers' => '\BurgerDigital\BlackbaudPhpSdk\Model\Fundraiser[]',
        'inactive' => 'bool',
        'linked_gifts' => 'string[]',
        'name' => 'string',
        'purpose' => 'string',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'ask_amount' => null,
        'ask_date' => 'date-time',
        'campaign_id' => null,
        'constituent_id' => null,
        'date_added' => 'date-time',
        'date_modified' => 'date-time',
        'deadline' => 'date-time',
        'expected_amount' => null,
        'expected_date' => 'date-time',
        'fund_id' => null,
        'funded_amount' => null,
        'funded_date' => 'date-time',
        'fundraisers' => null,
        'inactive' => null,
        'linked_gifts' => null,
        'name' => null,
        'purpose' => null,
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'ask_amount' => 'ask_amount',
        'ask_date' => 'ask_date',
        'campaign_id' => 'campaign_id',
        'constituent_id' => 'constituent_id',
        'date_added' => 'date_added',
        'date_modified' => 'date_modified',
        'deadline' => 'deadline',
        'expected_amount' => 'expected_amount',
        'expected_date' => 'expected_date',
        'fund_id' => 'fund_id',
        'funded_amount' => 'funded_amount',
        'funded_date' => 'funded_date',
        'fundraisers' => 'fundraisers',
        'inactive' => 'inactive',
        'linked_gifts' => 'linked_gifts',
        'name' => 'name',
        'purpose' => 'purpose',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'ask_amount' => 'setAskAmount',
        'ask_date' => 'setAskDate',
        'campaign_id' => 'setCampaignId',
        'constituent_id' => 'setConstituentId',
        'date_added' => 'setDateAdded',
        'date_modified' => 'setDateModified',
        'deadline' => 'setDeadline',
        'expected_amount' => 'setExpectedAmount',
        'expected_date' => 'setExpectedDate',
        'fund_id' => 'setFundId',
        'funded_amount' => 'setFundedAmount',
        'funded_date' => 'setFundedDate',
        'fundraisers' => 'setFundraisers',
        'inactive' => 'setInactive',
        'linked_gifts' => 'setLinkedGifts',
        'name' => 'setName',
        'purpose' => 'setPurpose',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'ask_amount' => 'getAskAmount',
        'ask_date' => 'getAskDate',
        'campaign_id' => 'getCampaignId',
        'constituent_id' => 'getConstituentId',
        'date_added' => 'getDateAdded',
        'date_modified' => 'getDateModified',
        'deadline' => 'getDeadline',
        'expected_amount' => 'getExpectedAmount',
        'expected_date' => 'getExpectedDate',
        'fund_id' => 'getFundId',
        'funded_amount' => 'getFundedAmount',
        'funded_date' => 'getFundedDate',
        'fundraisers' => 'getFundraisers',
        'inactive' => 'getInactive',
        'linked_gifts' => 'getLinkedGifts',
        'name' => 'getName',
        'purpose' => 'getPurpose',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['ask_amount'] = $data['ask_amount'] ?? null;
        $this->container['ask_date'] = $data['ask_date'] ?? null;
        $this->container['campaign_id'] = $data['campaign_id'] ?? null;
        $this->container['constituent_id'] = $data['constituent_id'] ?? null;
        $this->container['date_added'] = $data['date_added'] ?? null;
        $this->container['date_modified'] = $data['date_modified'] ?? null;
        $this->container['deadline'] = $data['deadline'] ?? null;
        $this->container['expected_amount'] = $data['expected_amount'] ?? null;
        $this->container['expected_date'] = $data['expected_date'] ?? null;
        $this->container['fund_id'] = $data['fund_id'] ?? null;
        $this->container['funded_amount'] = $data['funded_amount'] ?? null;
        $this->container['funded_date'] = $data['funded_date'] ?? null;
        $this->container['fundraisers'] = $data['fundraisers'] ?? null;
        $this->container['inactive'] = $data['inactive'] ?? null;
        $this->container['linked_gifts'] = $data['linked_gifts'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['purpose'] = $data['purpose'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The immutable system record ID of the opportunity.
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets ask_amount
     *
     * @return \BurgerDigital\BlackbaudPhpSdk\Model\Currency|null
     */
    public function getAskAmount()
    {
        return $this->container['ask_amount'];
    }

    /**
     * Sets ask_amount
     *
     * @param \BurgerDigital\BlackbaudPhpSdk\Model\Currency|null $ask_amount ask_amount
     *
     * @return self
     */
    public function setAskAmount($ask_amount)
    {
        $this->container['ask_amount'] = $ask_amount;

        return $this;
    }

    /**
     * Gets ask_date
     *
     * @return \DateTime|null
     */
    public function getAskDate()
    {
        return $this->container['ask_date'];
    }

    /**
     * Sets ask_date
     *
     * @param \DateTime|null $ask_date The date when the solicitation was made. Uses <a href=\"https://tools.ietf.org/html/rfc3339\">ISO-8601 format: </a><i>2015-09-18T16:25:00</i>.
     *
     * @return self
     */
    public function setAskDate($ask_date)
    {
        $this->container['ask_date'] = $ask_date;

        return $this;
    }

    /**
     * Gets campaign_id
     *
     * @return string|null
     */
    public function getCampaignId()
    {
        return $this->container['campaign_id'];
    }

    /**
     * Sets campaign_id
     *
     * @param string|null $campaign_id The immutable system record ID of the campaign associated with the opportunity. The campaign sets the overall objectives for raising money.
     *
     * @return self
     */
    public function setCampaignId($campaign_id)
    {
        $this->container['campaign_id'] = $campaign_id;

        return $this;
    }

    /**
     * Gets constituent_id
     *
     * @return string|null
     */
    public function getConstituentId()
    {
        return $this->container['constituent_id'];
    }

    /**
     * Sets constituent_id
     *
     * @param string|null $constituent_id The immutable system record ID of the constituent associated with the opportunity.
     *
     * @return self
     */
    public function setConstituentId($constituent_id)
    {
        $this->container['constituent_id'] = $constituent_id;

        return $this;
    }

    /**
     * Gets date_added
     *
     * @return \DateTime|null
     */
    public function getDateAdded()
    {
        return $this->container['date_added'];
    }

    /**
     * Sets date_added
     *
     * @param \DateTime|null $date_added The date when the opportunity was created. Includes an offset from UTC in <a href=\"https://tools.ietf.org/html/rfc3339\">ISO-8601 format: </a><i>1969-11-21T10:29:43-04:00</i>.
     *
     * @return self
     */
    public function setDateAdded($date_added)
    {
        $this->container['date_added'] = $date_added;

        return $this;
    }

    /**
     * Gets date_modified
     *
     * @return \DateTime|null
     */
    public function getDateModified()
    {
        return $this->container['date_modified'];
    }

    /**
     * Sets date_modified
     *
     * @param \DateTime|null $date_modified The date when the opportunity was last modified. Includes an offset from UTC in <a href=\"https://tools.ietf.org/html/rfc3339\">ISO-8601 format: </a><i>1969-11-21T10:29:43-04:00</i>.
     *
     * @return self
     */
    public function setDateModified($date_modified)
    {
        $this->container['date_modified'] = $date_modified;

        return $this;
    }

    /**
     * Gets deadline
     *
     * @return \DateTime|null
     */
    public function getDeadline()
    {
        return $this->container['deadline'];
    }

    /**
     * Sets deadline
     *
     * @param \DateTime|null $deadline The goal date for the opportunity to result in a gift. Uses <a href=\"https://tools.ietf.org/html/rfc3339\">ISO-8601 format: </a><i>2015-09-18T16:25:00</i>.
     *
     * @return self
     */
    public function setDeadline($deadline)
    {
        $this->container['deadline'] = $deadline;

        return $this;
    }

    /**
     * Gets expected_amount
     *
     * @return \BurgerDigital\BlackbaudPhpSdk\Model\Currency|null
     */
    public function getExpectedAmount()
    {
        return $this->container['expected_amount'];
    }

    /**
     * Sets expected_amount
     *
     * @param \BurgerDigital\BlackbaudPhpSdk\Model\Currency|null $expected_amount expected_amount
     *
     * @return self
     */
    public function setExpectedAmount($expected_amount)
    {
        $this->container['expected_amount'] = $expected_amount;

        return $this;
    }

    /**
     * Gets expected_date
     *
     * @return \DateTime|null
     */
    public function getExpectedDate()
    {
        return $this->container['expected_date'];
    }

    /**
     * Sets expected_date
     *
     * @param \DateTime|null $expected_date The date when the prospect is expected to give in response to the opportunity. Uses <a href=\"https://tools.ietf.org/html/rfc3339\">ISO-8601 format: </a><i>2015-09-18T16:25:00</i>.
     *
     * @return self
     */
    public function setExpectedDate($expected_date)
    {
        $this->container['expected_date'] = $expected_date;

        return $this;
    }

    /**
     * Gets fund_id
     *
     * @return string|null
     */
    public function getFundId()
    {
        return $this->container['fund_id'];
    }

    /**
     * Sets fund_id
     *
     * @param string|null $fund_id The immutable system record ID of the fund associated with the opportunity. The fund designates the specific financial purpose of a gift and identifies the financial account for that gift.
     *
     * @return self
     */
    public function setFundId($fund_id)
    {
        $this->container['fund_id'] = $fund_id;

        return $this;
    }

    /**
     * Gets funded_amount
     *
     * @return \BurgerDigital\BlackbaudPhpSdk\Model\Currency|null
     */
    public function getFundedAmount()
    {
        return $this->container['funded_amount'];
    }

    /**
     * Sets funded_amount
     *
     * @param \BurgerDigital\BlackbaudPhpSdk\Model\Currency|null $funded_amount funded_amount
     *
     * @return self
     */
    public function setFundedAmount($funded_amount)
    {
        $this->container['funded_amount'] = $funded_amount;

        return $this;
    }

    /**
     * Gets funded_date
     *
     * @return \DateTime|null
     */
    public function getFundedDate()
    {
        return $this->container['funded_date'];
    }

    /**
     * Sets funded_date
     *
     * @param \DateTime|null $funded_date The date when the prospect gave in response to the opportunity. Uses <a href=\"https://tools.ietf.org/html/rfc3339\">ISO-8601 format: </a><i>2015-09-18T16:25:00</i>.
     *
     * @return self
     */
    public function setFundedDate($funded_date)
    {
        $this->container['funded_date'] = $funded_date;

        return $this;
    }

    /**
     * Gets fundraisers
     *
     * @return \BurgerDigital\BlackbaudPhpSdk\Model\Fundraiser[]|null
     */
    public function getFundraisers()
    {
        return $this->container['fundraisers'];
    }

    /**
     * Sets fundraisers
     *
     * @param \BurgerDigital\BlackbaudPhpSdk\Model\Fundraiser[]|null $fundraisers The set of immutable constituent system record IDs for the fundraisers assigned to the opportunity.
     *
     * @return self
     */
    public function setFundraisers($fundraisers)
    {
        $this->container['fundraisers'] = $fundraisers;

        return $this;
    }

    /**
     * Gets inactive
     *
     * @return bool|null
     */
    public function getInactive()
    {
        return $this->container['inactive'];
    }

    /**
     * Sets inactive
     *
     * @param bool|null $inactive Indicates whether the opportunity is inactive.
     *
     * @return self
     */
    public function setInactive($inactive)
    {
        $this->container['inactive'] = $inactive;

        return $this;
    }

    /**
     * Gets linked_gifts
     *
     * @return string[]|null
     */
    public function getLinkedGifts()
    {
        return $this->container['linked_gifts'];
    }

    /**
     * Sets linked_gifts
     *
     * @param string[]|null $linked_gifts The  immutable system record IDs of the gifts related to the opportunity.
     *
     * @return self
     */
    public function setLinkedGifts($linked_gifts)
    {
        $this->container['linked_gifts'] = $linked_gifts;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The name that identifies the opportunity throughout the program, such as in lists or on constituent records.
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets purpose
     *
     * @return string|null
     */
    public function getPurpose()
    {
        return $this->container['purpose'];
    }

    /**
     * Sets purpose
     *
     * @param string|null $purpose The intended use for any money raised as a result of the opportunity. Available values are the entries in the <a href=\"https://developer.sky.blackbaud.com/docs/services/58e3b2597c1af25c58b9c4e3/operations/ListOpportunityPurposes\"><b>Purposes</b></a> table.
     *
     * @return self
     */
    public function setPurpose($purpose)
    {
        $this->container['purpose'] = $purpose;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status The status that indicates where the opportunity is in the solicitation process. This property can experience a data latency of about 10 minutes on the <a href=\"https://developer.sky.blackbaud.com/docs/services/58e3b2597c1af25c58b9c4e3/operations/58e3b27ba9db950fa048c8a9\">Opportunity (Get) endpoint</a>. Available values are the entries in the <a href=\"https://developer.sky.blackbaud.com/docs/services/58e3b2597c1af25c58b9c4e3/operations/ListOpportunityStatuses\"><b>Proposal Status</b></a> table.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


